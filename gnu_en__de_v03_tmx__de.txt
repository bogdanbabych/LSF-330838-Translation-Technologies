<doc parent_folder="upload" id="file15517258" filename="gnu-en--de-v03.tmx">
<align>Informationen zum GNU-Betriebssystem
Der Name GNU ist ein rekursives Akronym von GNU’s Not Unix (‚GNU ist nicht Unix‘) und wird [ˈgnuː] ausgesprochen.</align>
<align>[Weitere historische und allgemeine Artikel über GNU.]</align>
<align>GNU wurde von Richard Stallman (RMS) im Jahr 1983 als ein Betriebssystem angekündigt, welches von engagierten Menschen zusammengestellt werden würde, die für die Freiheit aller Softwarenutzer zusammenarbeiten, um ihre Datenverarbeitung kontrollieren zu können.</align>
<align>RMS ist auch heute noch der Chief GNUisance.</align>
<align>Das primäre und anhaltende Ziel von GNU ist ein unixoides System anzubieten, das 100 % Freie Software wäre.</align>
<align>Nicht 95%ig, nicht 99,5%ig, sondern 100%ig frei.</align>
<align>Der Name des Systems, GNU, ist ein rekursives Akronym von GNU’s Not Unix (‚GNU ist Nicht Unix‘) ‑ eine Art, den technischen Ideen von Unix Tribut zu zollen und gleichzeitig zu sagen, dass GNU etwas anderes ist.</align>
<align>Technisch gesehen ist GNU wie Unix.</align>
<align>Aber im Gegensatz zu Unix gibt GNU seinen Benutzern Freiheit.</align>
<align>Vollständig freie Distributionen, die diesem Ziel entsprechen, stehen heute zur Verfügung, viele mit dem GNU Linux-libre-Betriebssystemkern (die Beziehung zwischen GNU und dem Betriebssystemkern Linux wird an anderer Stelle umfassend beschrieben).</align>
<align>Die GNU-Pakete wurden so aufeinander abgestimmt, damit wir ein funktionierendes GNU-System haben konnten.</align>
<align>Es hat sich gezeigt, dass sie auch als gemeinsamer Upstream für viele Distributionen dienen, also Beiträge zu GNU-Paketen der Freie-Software-Gemeinschaft als Ganzes helfen.</align>
<align>Natürlich ist die Arbeit an GNU noch nicht mit dem Ziel abgeschlossen, ein System zu erstellen, das Rechnernutzern die größtmögliche Freiheit gibt.</align>
<align>GNU-Pakete beinhalten benutzerorientierte Anwendungen, Dienstprogramme, Hilfsprogramme, Bibliotheken, sogar Spiele ‑ alle Programme, die ein Betriebssystem seinen Nutzern zweckmäßigerweise anbieten kann.</align>
<align>Neue Pakete sind willkommen …</align>
<align>Tausende von Menschen haben sich angeschlossen, um GNU so erfolgreich zu machen wie es heute ist, und es gibt viele Möglichkeiten um mitzuwirken, sowohl technisch als auch nichttechnisch.</align>
<align>GNU-Entwickler treffen sich von Zeit zu Zeit auf GNU Hacker Meetings, manchmal als Teil der größeren Freie-Software-Gemeinschaft LibrePlanet-Konferenzen.</align>
<align>GNU wurde auf verschiedene Weise von der Free Software Foundation (FSF) unterstützt, eine ebenfalls von RMS gegründete gemeinnützige Organisation, um für Freie-Software-Ideale einzutreten.</align>
<align>Unter anderem akzeptiert die FSF Copyright-Übertragungen und Verzichtserklärungen, damit sie vor Gericht im Namen der GNU-Programme fungieren kann (zur Klarstellung: ein Programm zu GNU beizutragen, erfordert nicht das Copyright an die FSF zu übertragen.</align>
<align>Wenn man das Copyright zuweist, wird die FSF die GNU GPL für das Programm durchsetzen, sollte jemand dagegen zuwider handeln; behält man das Copyright, liegt die Durchsetzung bei Ihnen.)</align>
<align>Das endgültige Ziel ist Freie Software bereitzustellen, damit Rechnernutzer alle Aufgaben erledigen können, die sie möchten ‑ und so proprietäre Software zu einer Sache der Vergangenheit zu machen. ⮝</align>
<align>[FSF] Die Free Software Foundation (FSF) ist eine gemeinnützige Organisation mit einer weltweiten Mission die Freiheit von Rechnernutzern zu fördern. Wir verteidigen die Rechte aller Softwarenutzer.</align>
<align>Mitmachen Spenden Shoppen
Bitte senden Sie allgemeine Fragen zur FSF & GNU an <gnu@gnu.org>.</align>
<align>Sie können auch die Free Software Foundation kontaktieren.</align>
<align>Ungültige Verweise und andere Korrekturen oder Vorschläge können an <webmasters@gnu.org> gesendet werden.</align>
<align>Bei der Übersetzung dieses Werkes wurde mit größter Sorgfalt vorgegangen.</align>
<align>Trotzdem können Fehler nicht völlig ausgeschlossen werden. Sollten Sie Fehler bemerken oder Vorschläge, Kommentare oder Fragen zu diesem Dokument haben, wenden Sie sich bitte an unser Übersetzungsteam <web-translators@gnu.org>.</align>
<align>Weitere Informationen über die Koordinierung und Einsendung von Übersetzungen unserer Internetpräsenz finden Sie in der LIESMICH für Übersetzungen.</align>
<align>Copyright © 2011, 2014, 2017 Free Software Foundation, Inc.</align>
<align>Dieses Werk ist lizenziert unter einer Creative Commons Namensnennung-Keine Bearbeitungen 4.0 International-Lizenz.</align>
<align>Mitteilung einer Urheberrechtsverletzung.</align>
<align>Freie Software. Was ist das?</align>
<align>Freie-Software-Definition
Haben Sie eine hier nicht beantwortete Frage bezüglich Freie-Software-Lizenzierung?</align>
<align>Siehe auch unsere weiteren Ressourcen zur Lizenzierung, bei unbeantworteten Anliegen wenden Sie sich bitte unter licensing@fsf.org an das FSF Compliance Lab.</align>
<align>Die Freie-Software-Definition soll verdeutlichen, welche Kriterien ein einzelnes Softwareprogramm erfüllen muss um als Freie Software betrachtet zu werden.</align>
<align>Von Zeit zu Zeit wird diese Definition überarbeitet, um dies zu verdeutlichen oder Fragen zu subtilen Problemen zu lösen.</align>
<align>Weitere Informationen zu gemachten Änderungen sind unter Historie zu finden.</align>
<align>Die „Open-Source“-Definition ist etwas anderes: eine ganz andere Philosophie, die auf anderen Werten beruht.</align>
<align>Auch die praktische Definition ist anders, jedoch sind alle quelloffenen Programme in der Tat beinahe frei.</align>
<align>Den Unterschied erklären wir in Warum „Open Source“ das Ziel Freie Software verfehlt.</align>
<align>Freie Software ist Software, die die Freiheit und Gemeinschaft der Nutzer respektiert.</align>
<align>Ganz allgemein bedeutet das, dass Nutzer die Freiheit haben Software auszuführen, zu kopieren, zu verbreiten, zu untersuchen, zu ändern und zu verbessern.</align>
<align>Freie Software ist daher eine Frage der Freiheit, nicht des Preises.</align>
<align>Um das Konzept zu verstehen sollte man an frei wie in Redefreiheit denken, nicht wie in Freibier.</align>
<align>Manchmal nennen wir sie auch Libre Software, dem französischen bzw. spanischen Wort für frei wie in Freiheit entlehnt, um deutlich zu machen, dass wir uns keinesfalls auf Software beziehen die gratis sei.</align>
<align>Wir kämpfen für diese Freiheiten, weil sie jedermann verdient.</align>
<align>Mit diesen Freiheiten kontrollieren Nutzer (sowohl einzeln als auch gemeinsam) das Programm und was es für sie ausführt.</align>
<align>Wenn nicht Nutzer das Programm kontrollieren, nennen wir es ein unfreies bzw. proprietäres Programm.</align>
<align>Das unfreie Programm kontrolliert die Nutzer, und der Entwickler kontrolliert das Programm.</align>
<align>Dies macht das Programm zu einem Instrument ungerechter Macht.</align>
<align>Vier wesentliche Freiheiten
Ein Programm ist Freie Software, wenn Nutzer eines Programms über vier wesentliche Freiheiten[1] verfügen:</align>
<align>Die Freiheit, das Programm auszuführen wie man möchte, für jeden Zweck (Freiheit 0).</align>
<align>Die Freiheit, die Funktionsweise des Programms zu untersuchen und eigenen Datenverarbeitungbedürfnissen anzupassen (Freiheit 1).</align>
<align>Der Zugang zum Quellcode ist dafür Voraussetzung.</align>
<align>Die Freiheit, das Programm zu redistribuieren und damit Mitmenschen zu helfen (Freiheit 2).</align>
<align>Die Freiheit, das Programm zu verbessern und diese Verbesserungen der Öffentlichkeit freizugeben, damit die gesamte Gesellschaft davon profitiert (Freiheit 3).</align>
<align>Der Zugang zum Quellcode ist dafür Voraussetzung.</align>
<align>Ein Programm ist freie Software, wenn es Nutzern adäquat all diese Freiheiten gewährt.</align>
<align>Ansonsten ist es unfrei.</align>
<align>Solange wir verschiedene unfreie Vertriebsschemata in Bezug darauf unterscheiden können, inwieweit sie dahinter zurückbleiben frei zu sein, betrachten wir sie alle gleichermaßen als unethisch.</align>
<align>In jedem angenommenen Szenario müssen diese Freiheiten zutreffen ‑ welchen Quellcode auch immer wir beabsichtigen zu benutzen (oder andere bewegen zu benutzen).</align>
<align>Betrachten wir beispielsweise ein Programm namens A, das automatisch ein Programm namens B startet um irgendetwas zu verarbeiten.</align>
<align>Wenn wir beabsichtigen A unverändert zu distribuieren, impliziert das, dass dessen Nutzer B ebenfalls benötigen ‑ wir müssen somit entscheiden ob sowohl A als auch B frei sind.</align>
<align>Wenn wir beabsichtigen A so zu modifizieren, damit es B nicht mehr benötigt, muss nur A frei sein, B ist für dieses Vorhaben nicht relevant.</align>
<align>Freie Software ist nicht gleichbedeutend mit unkommerziell.</align>
<align>Ein freies Programm muss für die kommerzielle Nutzung, die kommerzielle Entwicklung und den kommerziellen Vertrieb verfügbar sein.</align>
<align>Die kommerzielle Entwicklung von freier Software ist nicht mehr unüblich.</align>
<align>Solche freie kommerzielle Software ist sehr wichtig.</align>
<align>Möglicherweise hat man Geld für Kopien freier Software ausgegeben oder Kopien unentgeltlich erhalten.</align>
<align>Aber egal wie man die Kopien erhalten hat, man hat immer die Freiheit die Software zu kopieren und zu ändern, sogar Kopien zu verkaufen.</align>
<align>Der weitere Text erläutert, was bestimmte Freiheiten adäquat macht oder nicht.</align>
<align>Die Freiheit, das Programm auszuführen wie man möchte
Die Freiheit, das Programm auszuführen bedeutet für jegliche Person oder Organisation die Freiheit zu haben, es auf jedem beliebigen Rechner für jede Art von Aufgabe und Zweck nutzen zu dürfen, ohne darüber mit dem Entwickler oder irgendeinem Unternehmen kommunizieren zu müssen.</align>
<align>In dieser Freiheit ist der Nutzer das Ziel, nicht der Entwickler!</align>
<align>Dem Nutzer steht es frei das Programm für eigene Zwecke auszuführen, und wenn man es an jemand anderen weitergibt, steht es dieser Person dann frei es für eigene Zwecke auszuführen, aber man ist nicht berechtigt, ihr eigene Absichten aufzuerlegen.</align>
<align>Die Freiheit, das Programm auszuführen wie man möchte bedeutet, dass einem nicht untersagt oder davon abgehalten wird, es auszuführen.</align>
<align>Dies hat nichts mit der Funktionalität des Programm zu tun, ob es technisch dazu in der Lage ist in einer bestimmten Umgebung zu funktionieren oder ob es für einen bestimmten Bereich der Datenverarbeitung sinnvoll ist.</align>
<align>Die Freiheit, den Quellcode zu untersuchen und Änderungen vorzunehmen
Damit Freiheit 1 und 3 (die Freiheiten, Änderungen vorzunehmen und geänderte Versionen zu veröffentlichen) sinnvoll sind, müssen Nutzer Zugang zum Quellcode des Programms haben.</align>
<align>Daher ist die Zugänglichkeit des Quellcodes eine notwendige Bedingung für Freie Software.</align>
<align>Verschleierter „Quellcode“ ist nicht wirklich Quellcode und zählt nicht als solcher.</align>
<align>Freiheit 1 umfasst die Freiheit, die eigene geänderte Version anstelle des Originals zu verwenden.</align>
<align>Kommt das Programm in einem Produkt zum Einsatz, in dem die modifizierte Version eines Dritten, nicht jedoch die eigene ‑ eine als Tivoisierung bzw. Abriegelung (engl. ‚Lockdown‘) oder (in seiner praktizierenden perversen Terminologie) als „Secure Boot“[*] bekannte Praxis ‑  ausgeführt wird, wird Freiheit 1 eher zu einem fadenscheinigen Vorwand anstatt einer praktischen Realität.</align>
<align>Diese Binärdateien sind nicht freie Software, selbst wenn der Quellcode, von dem sie kompiliert werden, frei ist.</align>
<align>Die Zusammenführung der verfügbaren freien Unterroutinen und -modulen ist eine wichtige Möglichkeit ein Programm zu modifizieren.</align>
<align>Wenn die Programmlizenz eines entsprechend lizenzierten vorhandenen Moduls die Zusammenführung untersagt ‑ beispielsweise wenn man nicht der Copyrightinhaber des hinzuzufügenden Quellcodes ist ‑ dann ist die Lizenz zu restriktiv, um sich als frei zu qualifizieren.</align>
<align>Ob eine Änderung eine Verbesserung darstellt, ist eine subjektive Angelegenheit.</align>
<align>Wenn das Recht ein Programm zu modifizieren im Wesentlichen auf Änderungen beschränkt wird, die jemand anderes als Verbesserung betrachtet, ist das Programm unfrei.</align>
<align>Die Freiheit zu redistribuieren, wenn man möchte: grundlegende Anforderungen
Die Freiheit, das Programm zu redistribuieren und […] der Öffentlichkeit freizugeben (Freiheit 2 und 3) bedeutet, dass man die Freiheit hat Kopien an jedermann überall weiterzugeben (entweder mit oder ohne Modifikationen, gratis oder gegen Gebühr für den Vertrieb).</align>
<align>Frei sein bedeutet, diese Dinge (unter anderem) vornehmen zu können, ohne fragen oder für die Berechtigung zahlen zu müssen.</align>
<align>Außerdem sollte man auch die Freiheit haben Modifikationen vorzunehmen und privat im eigenen Werk oder Spiel zu nutzen, ohne auch nur deren Existenz zu erwähnen.</align>
<align>Veröffentlicht man die Änderungen, sollte es nicht erforderlich sein, irgendjemand im Besonderen oder auf irgendeine bestimmte Weise zu benachrichtigen.</align>
<align>Freiheit 3 umfasst die Freiheit, eigene modifizierte Versionen als Freie Software freizugeben.</align>
<align>Eine freie Lizenz kann auch andere Möglichkeiten der Freigabe zulassen. Mit anderen Worten muss es sich nicht um eine Lizenz mit Copyleft handeln.</align>
<align>Allerdings qualifiziert sich eine Lizenz, die von modifizierten Versionen verlangt unfrei zu sein, nicht als freie Lizenz.</align>
<align>Die Freiheit, Programmkopien aufs neue zu distribuieren muss binäre oder ausführbare Formen des Programms als auch den Quellcode für modifizierte und unmodifizierte Versionen beinhalten (die Distribution von Programmen in ausführbarer Form ist für bequem installierbare freie Betriebssysteme notwendig).</align>
<align>Es ist in Ordnung, wenn es für bestimmte Anwendungen keine Möglichkeit gibt eine Binärdatei oder ausführbare Form zu erstellen (da einige Programmiersprachen diese Funktion nicht unterstützen), aber man muss die Freiheit haben solche Formen an Dritte weiterzugeben, sollte man eine Möglichkeit finden oder entwickeln, sie zu erstellen.</align>
<align>Copyleft
Bestimmte Richtlinien über die Art und Weise Freie Software zu distribuieren sind akzeptabel, sofern sie nicht den wesentlichen Freiheiten widersprechen.</align>
<align>Copyleft ist beispielsweise (sehr vereinfacht) eine Richtlinie, die verhindert, dass bei einer Redistribution des Programms keine Restriktionen hinzugefügt werden können, um Anderen wesentliche Freiheiten zu versagen.</align>
<align>Diese Richtlinie widerspricht nicht den wesentlichen Freiheiten ‑ vielmehr schützt es sie.</align>
<align>Das GNU-Projekt verwendet Copyleft, um die vier Freiheiten rechtlich für jeden zu sichern.</align>
<align>Wir glauben es gibt wichtige Gründe, warum es besser ist Copyleft zu verwenden.</align>
<align>Aber auch Freie Software ohne Copyleft ist ethisch vertretbar (siehe auch Kategorien freier und unfreier Software, wie sich Freie Software, Software mit Copyleft und andere Softwarekategorien aufeinander beziehen).</align>
<align>Richtlinien über Verpackungs- und Distributionsinformationen
Richtlinien, wie man eine modifizierte Version verpacken kann, sind allerdings akzeptabel, sofern sie nicht substantiell die Freiheit einschränken, modifizierte Versionen freizugeben oder modifizierte Versionen privat herzustellen und zu nutzen.</align>
<align>Somit ist es akzeptabel, wenn die Lizenz verlangt den Namen der modifizierten Version zu ändern, ein Logo zu entfernen oder eigene Modifikationen als eigene zu identifizieren.</align>
<align>Solange diese Bedingungen nicht so aufwändig sind, dass sie die Freigabe der Änderungen effektiv behindern, sind sie zulässig; man nimmt bereits andere Programmänderungen vor, ein paar mehr sollten kein Problem darstellen …</align>
<align>Richtlinien wie ‚wenn Sie Ihre Version auf diese Weise zur Verfügung stellen, müssen Sie sie auch auf diese Weise zur Verfügung stellen‘, können unter derselben Bedingung ebenfalls akzeptabel sein.</align>
<align>Solch eine akzeptable Richtlinie wäre beispielsweise dem früheren Entwickler auf dessen Bitte hin eine Kopie der modifizierten und distribuierten Version zukommen lassen zu müssen.</align>
<align>[Hinweis: Eine solche Richtlinie lässt immer noch die Wahl, ob man seine Version überhaupt distribuierten möchte.] Ebenfalls sind Richtlinien akzeptabel, die die Freigabe des Quellcodes für öffentlich einsetzbare Programmversionen an Nutzer verlangen.</align>
<align>Ein besonderes Problem ergibt sich, wenn eine Lizenz die Änderung des Namens erfordert, durch den das Programm aus anderen Programmen aufgerufen wird.</align>
<align>Das behindert wirksam die Freigabe der eigenen geänderten Version, um das Original, wenn durch jenen anderen Programmen aufgerufen, zu ersetzen.</align>
<align>Diese Art von Anforderung ist nur dann akzeptabel, wenn es eine geeignete Alias-Funktion gibt, die erlaubt, den Namen des Originalprogramms als Decknamen für die modifizierte Version anzugeben.</align>
<align>Ausfuhrbestimmungen
Mitunter können staatliche Ausfuhrkontrollbestimmungen und Handelssanktionen die Freiheit einschränken, Programmkopien international zu distribuieren.</align>
<align>Softwareentwickler haben nicht die Macht, diese Restriktionen zu beseitigen oder außer Kraft zu setzen, aber sie können und müssen sich widersetzen sie als Nutzungsbedingungen des Programms aufzuerlegen.</align>
<align>Dadurch betreffen die Restriktionen keine Aktivitäten und Menschen außerhalb der Rechtsordnungen dieser Regierungen.</align>
<align>Daher dürfen freie Softwarelizenzen keinen Gehorsam gegenüber allen nicht trivialen Ausfuhrbestimmungen als Bedingung für die Ausübung einer der wesentlichsten Freiheiten verlangen.</align>
<align>Lediglich die bloße Existenz von Ausfuhrbestimmungen ‑ ohne diese zu einer Bedingung der Lizenz selbst zu machen ‑ ist akzeptabel, da dies keine Nutzer beschränkt.</align>
<align>Ist eine Ausfuhrbestimmung tatsächlich für Freie Software trivial, dann ist die erforderliche Bedingung kein tatsächliches Problem; jedoch ist sie ein potenzielles Problem, da eine spätere Änderung im Exportgesetz die Erfordernis trivial und damit die Software unfrei machen könnte.</align>
<align>Rechtliche Hinweise
Damit diese Freiheiten wirklich gelten, müssen diese dauerhaft und unwiderruflich sein ‑ solange man nichts Unrechtes anstellt. Sofern Softwareentwickler die Macht haben, die Lizenz zu ihren Bedingungen zu widerrufen oder rückwirkend Restriktionen hinzuzufügen, ohne dafür Anlass gegeben zu haben, ist die Software unfrei.</align>
<align>Eine freie Lizenz darf nicht die Einhaltung einer Lizenz eines unfreien Programms erforderlich machen.</align>
<align>Dementsprechend, wenn beispielsweise eine Lizenz die Einhaltung mit den Lizenzen aller genutzten Programme erfordert, würde dies im Falle eines Nutzers, der unfreie Programme ausführt, die Einhaltung mit den Lizenzen dieser unfreien Programme erfordern. Das macht die Lizenz unfrei.</align>
<align>Bei einer freien Lizenz ist die Angabe zulässig, welches Recht anwendbar oder wo Rechtsstreitigkeiten durchgeführt werden müssen oder beides.[**]</align>
<align>Auftragsbezogene Lizenzen
Die meisten freien Softwarelizenzen beruhen auf dem Urheberrecht, und es gibt Restriktionen, welche Arten von Anforderungen durch das Urheberrecht auferlegt werden können.</align>
<align>Wenn eine auf dem Urheberrecht beruhende Lizenz Freiheit auf die oben beschriebene Weise respektiert, ist es unwahrscheinlich eine andere Art von Problem zu haben, dass nicht voraussehbar war (obwohl dies gelegentlich vorkommt).</align>
<align>Einige freie Softwarelizenzen beruhen allerdings auf Verträgen, und Verträge können eine viel größere Bandbreite möglicher Beschränkungen auferlegen.</align>
<align>Das bedeutet, es gibt viele Möglichkeiten wie solch eine Lizenz inakzeptabel restriktiv und unfrei sein könnte.</align>
<align>Es ist unmöglich alle Möglichkeiten aufzuführen, die auftreten könnten.</align>
<align>Wenn eine vertragsbasierte Lizenz den Nutzer auf eine ungewöhnliche Weise beschränkt, was auf Urheberrecht beruhende Lizenzen nicht können und welches hier als nicht legitim erwähnt wird, werden wir darüber nachdenken müssen und wahrscheinlich zu dem Schluss kommen, dass sie unfrei ist.</align>
<align>Die richtigen Wörter, wenn es um Freie Software geht
Spricht man über Freie Software, empfiehlt es sich Begriffe wie verschenken oder kostenlos zu vermeiden, weil diese Begriffe implizieren, es würde um den Preis gehen, nicht um Freiheit.</align>
<align>Einige gebräuchliche Begriffe wie „Piraterie“ stellen Meinungen dar, von denen wir hoffen, dass Sie diese nicht unterstützen.</align>
<align>Weitere voreingenommene oder irreführende Begriffe unter Zu vermeidende Wörter, ebenso verschiedene Übersetzungen des Begriffs Freie Software.</align>
<align>Interpretation diese Kriterien
Abschließend noch der Hinweis, dass die in dieser Freie-Software-Definition angegeben Kriterien sorgfältige Überlegungen bei ihrer Interpretation erfordern.</align>
<align>Um zu entscheiden, ob sich eine bestimmte Softwarelizenz als freie Softwarelizenz qualifiziert, beurteilen wir basierend auf diesen Kriterien, ob ihr Geist sowie der genaue Wortlaut passt.</align>
<align>Enthält eine Lizenz übertriebene Restriktionen, wird sie abgelehnt, auch wenn wir das Problem in diesen Kriterien nicht erwarteten.</align>
<align>Manchmal spricht eine Lizenzanforderung ein Punkt an, der umfangreiche Überlegungen erfordert, einschließlich Diskussionen mit einem Rechtsanwalt, bevor entschieden werden kann, ob diese Anforderung annehmbar ist.</align>
<align>Wird ein Punkt zum Abschluss gebracht, werden diese Kriterien aktualisiert, um verständlicher zu machen, warum sich bestimmte Lizenzen qualifizieren oder nicht.</align>
<align>Hilfe zu freien Lizenzen
Weitere Informationen, ob sich eine bestimmte Lizenz als freie Softwarelizenz qualifiziert, sind unter Verschiedene Lizenzen und Kommentare zu finden.</align>
<align>Sollte die betreffende Lizenz nicht aufgeführt sein, kontaktieren Sie uns bitte unter <licensing@gnu.org>.</align>
<align>Wenn Sie daran denken eine neue Lizenz zu schreiben, wenden Sie sich bitte zuvor an die Free Software Foundation.</align>
<align>Die nur noch schwer überschaubare Ausuferung verschiedener freier Softwarelizenzen bedeutet für Nutzer einen erhöhten Aufwand, die Lizenzen überhaupt zu verstehen.</align>
<align>Vielleicht können wir bei der Suche nach einer bereits vorhandenen freien Softwarelizenz behilflich sein, die ihren Bedürfnissen entspricht.</align>
<align>Ist das nicht möglich, wenn tatsächlich eine neue Lizenz benötigt wird, können Sie mit unserer Hilfe sicherstellen, dass die Lizenz wirklich eine freie Softwarelizenz ist und verschiedene praktische Probleme vermeiden.</align>
<align>Jenseits von Software
Software-Handbücher müssen frei sein, aus den gleichen Gründen, warum Software frei sein muss und weil Handbücher in der Tat Bestandteil der Software sind.</align>
<align>Die gleichen Argumente sind auch für andere Arten von Werken von praktischem Nutzen sinnvoll ‑ also Werke, die nützliches Wissen verkörpern wie etwa pädagogische Werke und Nachschlagewerke.</align>
<align>Wikipedia ist das wohl bekannteste Beispiel.</align>
<align>Jegliches Werk kann frei sein, und die Freie-Software-Definition ist zu einer Definition von freien kulturellen Werken erweitert worden, die auf Werke jeglicher Art anwendbar sind.</align>
<align>„Open Source“, offener Quellcode?</align>
<align>Eine andere Gruppierung verwendet den Begriff „Open Source“ um etwas ähnliches (aber nicht identisches) wie Freie Software zu meinen.</align>
<align>Die Freie-Software-Gemeinschaft bevorzugt den Begriff Freie Software, denn, sobald man gehört hat, dass sich dieser auf Freiheit statt auf den Preis bezieht, ruft es Freiheit in Erinnerung.</align>
<align>Das Wort offen bezieht sich niemals auf Freiheit.</align>
<align>Historie
Von Zeit zu Zeit wird diese Freie-Software-Definition überarbeitet.</align>
<align>Diese substanziellen Änderungen sowie Verweise veranschaulichen genau, was geändert wurde.</align>
<align>Version 1.153: Klarstellung, dass die Freiheit, das Programm auszuführen, bedeutet, dass einen nichts davon abhält es auszuführen.</align>
<align>Version 1.41: Klarstellung, welcher Quellcode unter einer freien Lizenz stehen muss.</align>
<align>Version 1.135: Freiheit 0 ist die Freiheit, das Programm beliebig auszuführen.</align>
<align>Version 1.134: Freiheit 0 hat nichts mit der Zweckmäßigkeit des Programm zu tun.</align>
<align>Version 1.131: Eine freie Lizenz darf nicht die Einhaltung einer unfreien Lizenz eines anderen Programms verlangen.</align>
<align>Version 1.129: Klarstellung, dass die Wahl des anwendbaren Rechts und des Gerichtsstandes zulässig sind.</align>
<align>(Das war immer unser Grundsatz.)
Version 1.122: Eine Ausfuhrkontrollbestimmung ist ‑ wenn die Bedingung nicht trivial ist ‑ ein echtes Problem; andernfalls nur ein potenzielles Problem.</align>
<align>Version 1.118: Klarstellung, dass sich die Angelegenheit auf das Recht beschränkt modifizieren zu dürfen, nicht darauf welche Modifizierungen vorgenommen wurden.</align>
<align>Und Modifizierungen sind nicht auf „Verbesserungen“ beschränkt.</align>
<align>Version 1.111: Klarstellung von 1.77, dass alle rückwirkenden Restriktionen inakzeptabel sind.</align>
<align>Die Urheberrechtsinhaber können jederzeit zusätzliche Berechtigung für die Nutzung des Werks dadurch einräumen, das Werk auf eine andere Weise parallel freizugeben.</align>
<align>Version 1.105: Spiegelt in einer kurzen Darstellung den Punkt von Freiheit 1 wider (bereits in 1.80 erwähnt), dass man tatsächlich die eigene modifizierte Version für die eigene Datenverarbeitung nutzen darf.</align>
<align>Version 1.92: Klarstellung, dass sich verschleierter Code nicht als Quellcode qualifiziert.</align>
<align>Version 1.90: Klarstellung, dass Freiheit 3 ​​das Recht einräumt, Kopien der eigenen modifizierten oder verbesserten Version zu distribuieren, nicht jedoch die Beteiligung an einem Entwicklungsprojekt bei Dritten.</align>
<align>Version 1.89: Freiheit 3 gewährt das Recht, modifizierte Versionen als Freie Software freizugeben.</align>
<align>Version 1.80: Freiheit 1 muss nicht nur theoretisch, sondern praktisch umsetzbar sein; d. h. keine Tivoisierung.</align>
<align>Version 1.77: Klarstellung, dass alle nachträglichen Lizenzänderungen inakzeptabel sind, auch wenn nicht als vollständiger Ersatz beschrieben.</align>
<align>Version 1.74: Vier Klarstellungen von Punkten, die nicht explizit genug oder an einigen Stellen angegebenen sind, aber nicht überall reflektiert werden:
„Verbesserungen“ bedeutet nicht, dass die Lizenz substantiell einschränken kann, welche Arten von modifizierten Versionen freigegeben werden können.</align>
<align>Freiheit 3 enthält die Verbreitung modifizierter Versionen, nicht nur deren Änderungen.</align>
<align>Das Recht, vorhandene Module zusammenzufügen, bezieht sich auf entsprechend lizenzierte Module.</align>
<align>Ausdrücklich die Schlussfolgerung des Punktes über Exportkontrolle.</align>
<align>Einführung einer Lizenzänderung führt zur Aufhebung der alten Lizenz.</align>
<align>Version 1.57: Abschnitt Jenseits von Software hinzugefügt.</align>
<align>Version 1.46: Klarstellung des für die Freiheit bedeutsamen Ziels, das Programm für jeden Zweck auszuführen.</align>
<align>Version 1.41: Klarstellung zum Wortlaut vertraglich geregelter Lizenzen.</align>
<align>Version 1.40: Erklärung, dass eine freie Lizenz erlauben muss, andere verfügbare Freie Software zu verwenden, um eigene Modifizierungen vorzunehmen.</align>
<align>Version 1.39: Es ist akzeptabel, wenn eine Lizenz erfordert, den Quellcode für von Ihnen für die öffentliche Nutzung bereitgestellte Softwareversionen zur Verfügung zu stellen.</align>
<align>Version 1.31: Es ist akzeptabel, wenn eine Lizenz erfordert, sich als Autor von Modifikationen zu identifizieren sowie weitere geringfügige Klarstellungen.</align>
<align>Version 1.23: Potenzielle Probleme im Zusammenhang mit vertragsbasierten Lizenzen.</align>
<align>Version 1.16: Erklärung, warum der Vertrieb von Binärdateien wichtig ist.</align>
<align>Version 1.11: Hinweis, dass eine freie Lizenz vorschreiben kann, auf Nachfrage früherer Entwickler eine Kopie der von Ihnen distribuierten Varianten zu übersenden.</align>
<align>Aufgrund anderer Änderungen an diesem Dokument, die die Definition oder deren Interpretationen selbst nicht beeinflussen, gibt es Lücken in den Versionsnummern.</align>
<align>Beispielsweise sind keine Änderungen wie Nebenbemerkungen, Formatierung, Rechtschreibung, Zeichensetzung oder andere aufgeführt.</align>
<align>Eine vollständige Übersicht aller Änderungen sind mit Hilfe der CVSweb-Oberflächezu finden.</align>
<align>Anmerkung
[1] Der Grund, warum die vier Freiheiten mit 0, 1, 2 und 3 nummeriert sind, ist historisch bedingt.</align>
<align>Um 1990 gab es drei Freiheiten, nummeriert mit 1, 2 und 3. Dann wurde klar, dass die Freiheit, das Programm für jeglichen Zweck auszuführen, explizit erwähnt werden musste.</align>
<align>Diese Freiheit war deutlich elementarer als die anderen drei, sollte also entsprechend vorangestellt sein.</align>
<align>Anstatt die anderen nun umzubenennen, wurde sie dem folgend Freiheit 0 benannt.</align>
<align>Freie Software ist jetzt sogar noch wichtiger
von Richard Stallman</align>
<align>Eine im Wesentlichen gleiche Fassung dieses Artikels ist in der Zeitschrift Wired im September 2013 erschienen.</align>
<align>Vorschläge, wie man die Freie-Software-Bewegung unterstützen kann</align>
<align>Seit 1983 setzt sich die Free Software Foundation (FSF) für die Freiheit von Rechnernutzern ein, damit diese die von ihnen genutzte Software kontrollieren, und nicht umgekehrt.</align>
<align>Wenn ein Programm Freiheit und Gemeinschaft von Nutzern respektiert, nennen wir es “Freie Software.”</align>
<align>Manchmal nennen wir sie auch Libre Software, um hervorzuheben, dass wir über Freiheit sprechen, nicht über den Preis.</align>
<align>Einige proprietäre ‑ unfreie ‑ Programme, wie Photoshop, sind sehr teuer; andere, wie Flash Player, sind gratis verfügbar ‑ aber das ist nur ein unwichtiges Detail.</align>
<align>So oder so geben sie dem Programmentwickler Macht über die Nutzer, Macht, die niemand haben sollte.</align>
<align>Diese beiden unfreien Programme haben noch etwas anderes gemein: beide sind Schadsoftware.</align>
<align>Das heißt, beide verfügen über Funktionen, um den Nutzer schlecht zu behandeln.</align>
<align>Proprietäre Software ist heutzutage häufig Schadsoftware, weil die Macht der Entwickler sie dazu verleitet.</align>
<align>Diese Übersicht führt rund 400 verschiedene bösartige Funktionen auf (Stand: April 2019), aber es ist sicherlich nur die Spitze des Eisbergs.</align>
<align>Mit freier Software kontrollieren Nutzer das Programm sowohl individuell als auch kollektiv.</align>
<align>Damit kontrollieren sie also, was ihre Rechner tun (vorausgesetzt diese Rechner verhalten sich loyal und tun das, was die Programme der Nutzer ihnen vorgeben).</align>
<align>Bei proprietärer Software kontrolliert das Programm die Nutzer und eine andere Entität (der Entwickler oder „Eigentümer“) kontrolliert das Programm.</align>
<align>Somit gibt das proprietäre Programm seinen Entwicklern Macht über deren Nutzer.</align>
<align>Das an sich ist schon ungerecht und verleitet Entwickler außerdem dazu, Nutzer auch auf andere Weise schlecht zu behandeln.</align>
<align>Selbst wenn proprietäre Software nicht gerade bösartig ist, haben ihre Entwickler einen Anreiz, sie süchtig, kontrollierend und manipulativ.zu machen.</align>
<align>Man kann sagen, wie der Autor dieses Artikels, dass die Entwickler eine ethische Verpflichtung haben das nicht zu tun, aber im Allgemeinen folgen sie eigenen Interessen.</align>
<align>Damit das nicht geschieht, sollte man sicherstellen, dass das Programm von seinen Nutzern kontrolliert wird.</align>
<align>Freiheit bedeutet, die Kontrolle über das eigene Leben zu haben.</align>
<align>Wenn man ein Programm verwendet, um damit Aktivitäten im Leben zu verrichten, hängt die eigene Freiheit davon ab, dass man die Kontrolle über das Programm hat.</align>
<align>Jeder verdient die Kontrolle über genutzte Programme, und das umso mehr, wenn sie für wichtige Lebensbereiche benutzt werden.</align>
<align>Die Nutzerkontrolle über das Programm erfordert vier wesentliche Freiheiten.</align>
<align>(0) Die Freiheit, das Programm auszuführen wie man möchte, für welchen Zweck auch immer.</align>
<align>(1) Die Freiheit, den Quellcode des Programms zu untersuchen und zu ändern, sodass das Programm die Datenverarbeitung so vornimmt wie man möchte.</align>
<align>Programme werden von Programmierern in einer Programmiersprache geschrieben ‑ wie Englisch in Verbindung mit Algebra ‑ und diese Programmform ist der Quellcode.</align>
<align>Wer sich mit Programmierung auskennt und das Programm in Form von Quellcode vorliegen hat, kann den Quellcode lesen, seine Funktionsweise verstehen und ebenso ändern.</align>
<align>Wenn alles, was man erhält, die ausführbare Form ist, eine Zahlenreihe, für den Betrieb des Rechners effizient, für einen Menschen jedoch extrem schwer verstehbar, sind Verstehen und Programmänderung unerhört schwer.</align>
<align>(2) Die Freiheit, exakte Kopien zu erstellen und zu verteilen, wenn man möchte.</align>
<align>(Das ist keine Verpflichtung, es ist Ihre Entscheidung.</align>
<align>Wenn das Programm frei ist, bedeutet das noch lange nicht, dass jemand eine Verpflichtung hat, Ihnen eine Kopie anzubieten, oder dass Sie eine Verpflichtung haben, jemanden eine Kopie anzubieten.</align>
<align>Ein Programm an Benutzer ohne Freiheit zu verteilen, behandelt sie schlecht. Allerdings kann die Entscheidung, das Programm nicht zu verteilen ‑ es privat zu benutzen ‑ niemanden schlecht behandeln.</align>
<align>(3) Die Freiheit, Kopien eigener modifizierter Versionen zu erstellen und zu verteilen, wenn man möchte.</align>
<align>Die ersten beiden Freiheiten bedeuten, dass jeder Nutzer individuelle Kontrolle über das Programm ausüben kann.</align>
<align>Mit den anderen beiden Freiheiten kann jede Nutzergruppe zusammen kollektive Kontrolle über das Programm ausüben.</align>
<align>Mit allen vier Freiheiten kontrollieren die Nutzer das Programm gänzlich.</align>
<align>Falls irgendeine von ihnen fehlt oder unzureichend ist, ist das Programm proprietär (unfrei) und ungerecht.</align>
<align>Andere Arten von Werken werden auch für praktische Tätigkeiten benutzt, einschließlich Kochrezepte, pädagogische Werke wie Lehrbücher, Nachschlagewerke wie Wörterbücher und Enzyklopädien, Schriftarten zum Anzeigen von Textpassagen, Schaltpläne von Hardware zum Nachbauen und Muster zur Herstellung nützlicher (nicht nur dekorativer) Objekte mit einem 3D-Drucker.</align>
<align>Da es sich nicht um Software handelt, erstreckt sich die Freie-Software-Bewegung streng genommen nicht auf sie, doch die gleiche Überlegung gilt und führt zu dem gleichen Ergebnis: diese Werke sollten die vier Freiheiten mit sich bringen.</align>
<align>Ein freies Programm ermöglicht es daran herumzubasteln, damit es tut, was man möchte (oder aufhört etwas zu tun, was man nicht mag).</align>
<align>An Software herumzubasteln mag sich lächerlich anhören, wenn man proprietäre Software als versiegelten Kasten gewohnt ist, doch in der freien Welt ist es üblich und ein guter Weg das Programmieren zu lernen.</align>
<align>Sogar der traditionelle amerikanische Zeitvertreib, an Autos basteln, ist gehemmt, da Autos nun unfreie Software enthalten.</align>
<align>Die Ungerechtigkeit von Proprietät
Wenn die Nutzer nicht das Programm kontrollieren, kontrolliert das Programm die Nutzer.</align>
<align>Bei proprietärer Software gibt es immer jemanden, den Entwickler oder „Eigentümer‘ des Programms, der das Programm kontrolliert ‑ und dadurch Macht über seine Nutzer ausübt.</align>
<align>Ein unfreies Programm ist ein Joch, ein Instrument der ungerechten Macht.</align>
<align>In ausschreitenden Fällen (obwohl diese Ausschreitungen ganz normal geworden sind) werden proprietäre Programme entworfen, um die Nutzer auszuspähen, sie einzuschränken, sie zu zensieren und sie zu missbrauchen.</align>
<align>Das Betriebssystem der Apple iDinger zum Beispiel tut all dies, und Windows macht es ebenso mit ARM-Chips auf mobilen Geräten.</align>
<align>Windows-Smartphone-Firmware und Google Chrome für Windows beinhalten eine universelle Hintertür, die einem Unternehmen erlaubt, das Programm aus der Ferne zu ändern, ohne um Erlaubnis zu fragen.</align>
<align>Der Amazon Kindle hat eine Hintertür, die Bücher löschen kann.</align>
<align>Die Nutzung unfreier Software im „Internet der Dinge“ macht sie sowohl zum „Internet der Telefonverkäufer“ als auch zum „Internet der Schnüffler“.</align>
<align>Mit der Absicht, die Ungerechtigkeit von unfreier Software zu beenden, entwickelt die Freie-Software-Bewegung freie Programme, so dass Nutzer sich befreien können.</align>
<align>Wir begannen 1984 mit der Entwicklung des freien Betriebssystems GNU. Heute führen Millionen von Rechnern GNU aus, vor allem in Kombination mit dem Systemkern Linux, allseits als GNU/Linux bekannt.</align>
<align>Ein Programm an Nutzer ohne Freiheit weiterzugeben, behandelt diese schlecht; die Entscheidung jedoch, das Programm nicht weiterzugeben, behandelt niemanden schlecht.</align>
<align>Wenn man ein Programm schreibt und es privat benutzt, tut man anderen gegenüber nichts Falsches (man verpasst eine Gelegenheit etwas Gutes zu tun, doch das ist nicht das selbe wie etwas Falsches zu tun).</align>
<align>Wenn wir demnach sagen, dass jede Software frei sein muss, meinen wir, dass jede Kopie mit den vier Freiheiten ausgestattet sein muss, doch wir meinen nicht, dass jemand die Pflicht hat, Ihnen eine Kopie anzubieten.</align>
<align>Unfreie Software und SaaSS
Unfreie Software war für Unternehmen der erste Weg, Kontrolle über die Datenverarbeitung der Menschen zu erlangen.</align>
<align>Heutzutage gibt es einen anderen Weg namens Service-as-a-Software-Substitute (SaaSS).</align>
<align>Das bedeutet, eigene Datenverarbeitungsaufgaben auf einem Server von jemand anderem zu erledigen.</align>
<align>SaaSS bedeutet nicht, dass die Programme auf dem Server unfrei sind (obwohl sie es oft sind).</align>
<align>Vielmehr verursacht SaaSS die gleichen Ungerechtigkeiten wie ein unfreies Programm: es sind zwei Pfade zum selben schlechten Ort.</align>
<align>Nehmen wir das Beispiel eines SaaSS-Übersetzungsdienstes: der Nutzer sendet Text an einen Server, der Server übersetzt es (etwa aus dem Englischen ins Spanische) und sendet die Übersetzung an den Nutzer zurück.</align>
<align>Jetzt ist die Aufgabe des Übersetzens unter der Kontrolle des Serverbetreibers anstatt beim Nutzer.</align>
<align>Wenn man SaaSS benutzt, kontrolliert der Serverbetreiber die Datenverarbeitung.</align>
<align>Es erfordert, dem Serverbetreiber alle relevanten Daten anzuvertrauen, welcher gezwungen sein wird, es dem Staat ebenso zu zeigen ‑ wem dient dieser Server letztendlich wirklich?</align>
<align>Primäre und sekundäre Ungerechtigkeiten
Wenn man proprietäre Programme oder SaaSS benutzt, schadet man sich in erster Linie selbst, weil es irgendjemanden ungerechte Macht über einen gibt.</align>
<align>Um seiner selbst Willen sollte man dem entfliehen.</align>
<align>Es schadet auch anderen, wenn man ein Versprechen gibt, nicht zu teilen.</align>
<align>Solch ein Versprechen ist ein Übel und das geringere Übel ist, es zu brechen. Für wahrhafte Aufrichtigkeit sollte man das Versprechen erst gar nicht geben.</align>
<align>Es gibt Fälle, in denen das Benutzen unfreier Software direkten Druck auf andere ausübt es gleichzutun.</align>
<align>Skype ist ein gutes Beispiel: wenn eine Person die unfreie Skype-Client-Software nutzt, erfordert es eine andere Person, die auch diese Software benutzt ‑ folglich treten beide ihre Freiheit ab (Google Hangouts hat das gleiche Problem).</align>
<align>Es ist sogar falsch die Nutzung solcher Programme zu empfehlen.</align>
<align>Wir sollten uns weigern, sie auch nur kurzzeitig, sogar auf dem Rechner einer anderen Person, zu benutzen.</align>
<align>Ein weiterer Schaden durch unfreie Programme und SaaSS ist, dass der Übeltäter den Lohn erntet, die Weiterentwicklung des Programms oder des „Dienstes‘ ermutigend, was wiederum zu noch mehr Personen führt, die unter dem Daumen des Unternehmens beherrscht werden.</align>
<align>Alle Formen des indirekten Schadens werden verstärkt, wenn der Nutzer eine öffentliche Einrichtung oder eine Schule ist.</align>
<align>Freie Software und der Staat
Öffentliche Einrichtungen gibt es für die Menschen, nicht für sich selbst. Wenn sie Daten verarbeiten, tun sie es für die Menschen.</align>
<align>Sie haben die Pflicht, die vollständige Kontrolle über die Datenverarbeitung aufrechtzuerhalten, so dass sie versichern können, dass sie richtig für die Menschen erledigt wird (hierbei handelt es sich um die Souveränität des Staates bei der Datenverarbeitung).</align>
<align>Man darf auf keinen Fall zulassen, dass die Kontrolle des Staates über die Datenverarbeitung in private Hände fällt.</align>
<align>Um die Kontrolle über die Datenverarbeitung der Menschen zu behalten, dürfen öffentliche Einrichtungen dies nicht mit proprietärer Software tun (Software, die unter der Kontrolle eines anderen als dem Staat ist).</align>
<align>Und sie dürfen sie nicht einem Dienst anvertrauen, der von einem anderen als dem Staat programmiert und betrieben wird, denn das wäre SaaSS.</align>
<align>In einem entscheidenden Fall bietet proprietäre Software überhaupt keine Sicherheit ‑ gegen seinen Entwickler.</align>
<align>Und der Entwickler könnte anderen zu Angriffen verhelfen.</align>
<align>Microsoft zeigt Windows-Programmfehler der NSA (der digitalen Spionagagentur der US-Regierung), bevor es sie behebt.</align>
<align>Wir wissen nicht, ob gleiches für Apple gilt, aber sie stehen unter dem gleichen Druck der US-Regierung wie Microsoft.</align>
<align>Wenn die Regierung irgendeines anderen Landes solche Software benutzt, gefährdet es die nationale Sicherheit.</align>
<align>Möchten Sie, dass die NSA in die Rechner Ihrer Regierung einbricht?</align>
<align>Siehe unsere Maßnahmen die Regierungen ergreifen können, um Freie Software zu fördern.</align>
<align>Freie Software und Bildung
Schulen (und dazu gehören alle Aktivitäten im Bildungsbereich) beeinflussen die Zukunft der Gesellschaft durch das, was sie lehren.</align>
<align>Sie sollten ausschließlich freie Software lehren, um ihren Einfluss für das Gute zu verwenden.</align>
<align>Ein proprietäres Programm zu lehren bedeutet, Abhängigkeit einzuimpfen, was gegen den Bildungsauftrag verstößt.</align>
<align>Durch Schulung beim Gebrauch von freier Software werden Schulen die Zukunft der Gesellschaft in Richtung Freiheit leiten und damit talentierten Programmierern helfen, das Handwerk zu meistern.</align>
<align>Sie werden Schülern auch die Gewohnheit zur Zusammenarbeit lehren, anderen helfend.</align>
<align>Jede Klasse sollte diese Regel haben: “Liebe Schülerschaft, diese Klasse ist ein Ort, an dem wir unser Wissen teilen.</align>
<align>Wenn zum Unterricht Software mitgebracht wird, darf sie nicht für sich behalten.</align>
<align>Vielmehr müssen Programmkopien einschließlich -quellcodes mit dem Rest der Klasse geteilt werden, falls jemand anderes davon lernen möchte.</align>
<align>Daher ist das Mitbringen proprietärer Software zum Unterricht nicht erlaubt, es sei denn, sie wird zur Nachkonstruktion benötigt.”</align>
<align>Proprietäre Entwickler würden uns die Schülerschaft bestrafen lassen, die im Innersten gut genug sind, um Software zu teilen, und diejenigen zu durchkreuzen, die neugierig genug sind, um es ändern zu wollen.</align>
<align>Dies bedeutet eine schlechte Bildung.</align>
<align>Siehe https://www.gnu.org/education/ für mehr Diskussionen über die Freie-Software-Nutzung an Schulen.</align>
<align>Freie Software: Mehr als “Vorteile”
Ich werde oft darum gebeten, die „Vorteile“ freier Software zu beschreiben.</align>
<align>Doch das Wort Vorteile ist nicht aussagekräftig genug, wenn es um Freiheit geht.</align>
<align>Ein Leben ohne Freiheit heißt Unterdrückung, und das gilt für die Datenverarbeitung genauso wie auch für jede andere Tätigkeit in unserem Leben.</align>
<align>Wir müssen uns dagegen wehren, den Programmentwicklern oder Datenverarbeitungsdiensten die Kontrolle über unsere Datenverarbeitung zu überlassen.</align>
<align>Aus egoistischen Gründen ist das der richtige Schritt, aber nicht nur aus egoistischen Gründen.</align>
<align>Freiheit schließt die Freiheit ein, mit anderen zusammenzuarbeiten.</align>
<align>Diese Freiheit leugnen bedeutet sie gespalten zu halten, welches der Anfang eines Schemas ist, sie zu unterdrücken.</align>
<align>In der Freie Software-Gemeinschaft ist uns die Wichtigkeit der Freiheit zur Zusammenarbeit deutlich bewusst, weil unsere Arbeit aus organisierter Zusammenarbeit besteht.</align>
<align>Wenn ein Freund oder eine Freundin zu Besuch kommt und Sie ein Programm benutzen sieht, könnte er oder sie um eine Kopie bitten.</align>
<align>Ein Programm, das davon abhält es weiterzugeben oder „eigentlich nicht“ sagt, ist unsozial.</align>
<align>In der Datenverarbeitung schließt Zusammenarbeit die Weitergabe exakter Kopien eines Programms an andere Nutzer ein.</align>
<align>Es schließt auch die Verteilung von selbst geänderten Versionen ein.</align>
<align>Freie Software fördert diese Formen der Zusammenarbeit, während proprietäre Software sie verbietet.</align>
<align>Sie verbietet die Weitergabe von Kopien und dadurch, dass sie Nutzern den Quellcode versagt, hindert es sie, Änderungen vorzunehmen.</align>
<align>SaaSS hat die gleichen Auswirkungen: erfolgt die Datenverarbeitung über das Internet auf dem Server bei jemand anderem, durch eine von jemand anderem gemachte Kopie eines Programms, ist die Software dahinter, die die Datenverarbeitung vornimmt, weder einseh- noch greifbar, man kann sie also nicht weitergeben oder ändern.</align>
<align>Fazit
Wir verdienen es, Kontrolle über unsere eigene Datenverarbeitung zu haben. Wie können wir diese Kontrolle gewinnen?</align>
<align>Durch Zurückweisen unfreier Software auf den Rechnern, die wir besitzen oder regelmäßig benutzen, und Zurückweisen von SaaSS. Durch das Entwickeln freier Software (für diejenigen unter uns, die Programmierer sind).</align>
<align>Durch die Weigerung, unfreie Software oder SaaSS zu entwickeln oder zu fördern.</align>
<align>Durch das Verbreiten dieser Ideen an Andere.</align>
<align>Wir und Tausende von Nutzern haben dies seit 1984 gemacht, so wie wir nun das freie GNU/Linux-Betriebssystem haben, das jedermann ‑ Programmierer oder nicht ‑ benutzen kann.</align>
<align>Schließen Sie sich unserer Sache an, als Programmierer oder Aktivist!</align>
<align>Machen wir alle Rechnernutzer frei.</align>
<align>Über das Projekt ‚GNU‘
von Richard Stallman</align>
<align>Die englische Originalausgabe wurde in dem Buch Open Sources veröffentlicht.</align>
<align>Richard Stallman war nie ein Anhänger von „Open Source“;, trug aber diesen Artikel bei, damit die Anschauungen der Freie-Software-Bewegung nicht völlig fehlen würden.</align>
<align>Bitte beachten Sie auch den Aufsatz Freie Software ist jetzt sogar noch wichtiger denn je, denn wir sollten auf Software ‑ Software die wir nutzen!</align>
<align>‑ bestehen, die frei ist.</align>
<align>Die erste Software-teilende Gemeinschaft
Als ich 1971 am Artificial Intelligence Laboratory (AI Lab) des Massachusetts Institute of Technology anfing zu arbeiten, wurde ich Teil einer Software-teilenden Gemeinschaft, die schon seit Jahren existierte.</align>
<align>Die gemeinsame Nutzung von Software war nicht nur auf unsere besondere Gemeinschaft beschränkt; sie ist so alt wie Rechner selbst, genauso wie der Austausch von Kochrezepten so alt wie das Kochen ist.</align>
<align>Aber wir praktizierten es mehr als die meisten.</align>
<align>Das AI Lab verwendete ein Mehrbenutzer-Betriebssystem namens Incompatible Timesharing System (ITS), welches die Hacker(1) des Laborpersonals in der Programmiersprache Assembler für den Digital PDP-10, einen der großen Rechner dieser Ära, entworfen und geschrieben hatten.</align>
<align>Als Mitglied dieser Gemeinschaft, ein angestellter Systemhacker des AI Labs, war es meine Aufgabe dieses System zu verbessern.</align>
<align>Wir nannten unsere Software nicht Freie Software, da dieser Ausdruck noch nicht geprägt war, aber das ist es, was sie war.</align>
<align>Wann immer jemand von einer anderen Universität oder einer Firma ein Programm portieren und benutzen wollte, freute uns das und wir ließen sie gewähren.</align>
<align>Wenn man jemanden ein unbekanntes interessantes Programm benutzen sah, konnte man immer den Quellcode bekommen, sodass man diesen lesen, verändern oder sogar Teile davon für neue Programme ausschlachten konnte.</align>
<align>Der Zusammenbruch der Gemeinschaft
Die Situation änderte sich Anfang der 80er Jahre drastisch, als Digital die PDP-10-Serie einstellte.</align>
<align>Ihre Architektur, elegant und leistungsfähig in den 60ern, konnte natürlich nicht auf größere Adressräume erweitert werden, welche in den 80ern möglich wurden.</align>
<align>Das bedeutete, dass nahezu alle im ITS zusammengesetzten Programme veraltet waren.</align>
<align>Die Hacker-Gemeinschaft des AI Labs war bereits kurz vorher zusammengebrochen.</align>
<align>Im Jahr 1981 hatte das ausgegliederte Unternehmen Symbolics fast alle Hacker aus dem AI Lab abgeworben, und die entvölkerte Gemeinschaft war außerstande, sich zu behaupten (das Buch Hackers von Steve Levy beschreibt diese Ereignisse sowie ein klares Bild dieser Gemeinschaft in ihrer Blütezeit).</align>
<align>Als das AI Lab 1982 einen neuen PDP-10 kaufte, entschieden dessen Administratoren, Digitals unfreies Mehrbenutzer-Betriebssystem anstatt ITS zu benutzen.</align>
<align>Die modernen Rechner dieser Ära, wie der VAX oder der 68020, hatten eigene Betriebssysteme, aber keines war freie Software: man musste sogar eine Vertraulichkeitsvereinbarung unterzeichnen, nur um eine ausführbare Kopie zu erhalten.</align>
<align>Das bedeutete, dass der erste Schritt zur Benutzung eines Rechners darin bestand zu versprechen, seinen Nächsten nicht zu helfen.</align>
<align>Eine zusammenarbeitende Gemeinschaft war verboten.</align>
<align>Die Vorschrift von Eigentümern proprietärer Software war: „Wenn Sie mit ihrem Nächsten teilen, sind Sie ein Softwarepirat.</align>
<align>Möchten Sie irgendwelche Änderungen, bitten Sie uns, diese vorzunehmen.“</align>
<align>Die Idee, dass das proprietäre Software-Sozialsystem ‑ das System, was besagt, man sei nicht berechtigt Software zu teilen oder zu verändern ‑ unsozial, unethisch und einfach falsch ist, mag einige überraschen.</align>
<align>Aber was könnten wir sonst über ein System sagen, was darauf basiert die Allgemeinheit zu spalten und Nutzer hilflos zu halten?</align>
<align>Leserinnen und Leser, die diesen Gedanken überraschend finden, haben das proprietäre Software-Sozialsystem möglicherweise als gegeben angesehen oder es unter den von den proprietären Softwareunternehmen vorgeschlagenen Begriffen beurteilt.</align>
<align>Softwarehersteller haben lange und hart daran gearbeitet Menschen davon zu überzeugen, es gäbe nur einen Blickwinkel auf dieses Problem.</align>
<align>Wenn Softwarehersteller über „Durchsetzung“ ihrer „Rechte“ oder Verhinderung von „Softwarepiraterie“ sprechen, ist das, was sie wirklich meinen, zweitrangig.</align>
<align>Die eigentliche Botschaft dieser Aussagen ist die unausgesprochene, für selbstverständlich gehaltene Annahme, die Öffentlichkeit aufzufordern, diese ungeprüft zu akzeptieren.</align>
<align>Betrachten wir sie deshalb etwas näher.</align>
<align>Eine Annahme ist, dass Softwareunternehmen ein unbestreitbares natürliches Recht auf eigene Software und damit Macht über alle ihre Benutzer haben (wenn dies ein natürliches Recht wäre, ganz gleich wie viel Schaden es für die Öffentlichkeit bedeutet, könnten wir nichts dagegen machen).</align>
<align>Interessanterweise lehnen die US-Verfassung und rechtliche Traditionen diese Auffassung ab. Urheberrecht ist kein natürliches Recht, sondern ein vom Staat künstlich auferlegtes Monopol, das Benutzern das natürliche Recht zu kopieren eingrenzt.</align>
<align>Eine weitere unausgesprochene Annahme ist, dass es bei Software nur wichtig ist, welche Aufgaben sie einem erlaubt auszuführen ‑ das wir Rechnernutzer uns nicht darum kümmern sollten, was für eine Gesellschaft wir haben dürfen.</align>
<align>Eine dritte Annahme ist, dass wir keine brauchbare Software haben würden (oder niemals ein Programm haben würden, um die eine oder andere Aufgabe zu erledigen), wenn wir einem Unternehmen nicht die Macht über die Benutzer des Programms geben würden.</align>
<align>Diese Annahme mag ganz plausibel gewesen sein, bevor die Freie-Software-Bewegung gezeigt hat, dass wir eine Menge nützlicher Software entwickeln können, ohne sie an Ketten zu legen.</align>
<align>Wenn wir diese Annahmen ablehnen zu akzeptieren und diese Probleme auf Grundlage des gesunden Menschenverstandes moralisch ‑ Benutzerinnen und Benutzer an erster Stelle ‑ beurteilen, kommen wir zu ganz anderen Schlussfolgerungen.</align>
<align>Rechnernutzer sollten Programme entsprechend ihren Bedürfnissen anpassen und mit anderen teilen können, denn anderen Menschen zu helfen ist die Grundlage der Gesellschaft.</align>
<align>Es würde den Rahmen dieses Dokuments sprengen, die Gründe für diese Schlussfolgerung ausführlich darzulegen, möchte aber auf die Artikel Warum Software keine Eigentümer haben sollte und Freie Software ist jetzt sogar noch wichtiger verweisen.</align>
<align>Eine gänzlich moralische Entscheidung
Mit dem Verlust meiner Gemeinschaft war es unmöglich weiterzumachen wie zuvor.</align>
<align>Stattdessen stand ich vor einer gänzlich moralischen Entscheidung.</align>
<align>Die einfachste Entscheidung wäre wohl gewesen, der proprietären Softwarewelt beizutreten, Vertraulichkeitsvereinbarungen zu unterzeichnen und zu versprechen, meinen Mithackern nicht mehr zu helfen.</align>
<align>Sehr wahrscheinlich würde ich auch Software entwickeln, die unter Vertraulichkeitsvereinbarungen freigegeben wäre und somit den Druck auf andere Menschen erhöhen, ihre Mitmenschen auch zu verraten.</align>
<align>Ich hätte auf diese Weise Geld gemacht und mich vielleicht mit dem Schreiben von Quellcode vergnügen können.</align>
<align>Aber ich wusste, dass ich am Ende meiner Karriere auf Jahre des Mauerbauens, um Menschen zu spalten, zurückblicken und das Gefühl haben würde, mein Leben damit verbracht zu haben, die Welt zu einem noch schlimmeren Ort gemacht zu haben.</align>
<align>Ich hatte bereits Erfahrung damit, am empfangenden Ende einer Vertraulichkeitsvereinbarung zu sein, als sich jemand weigerte, mir und dem MIT AI Lab den Quellcode für das Steuerprogramm unseres Druckers zu geben (der Mangel bestimmter Fähigkeiten in diesem Programm machte den Gebrauch des Druckers äußerst frustrierend).</align>
<align>Also konnte ich mir selbst nicht mehr sagen, dass Vertraulichkeitsvereinbarungen unschuldig waren. Ich war sehr verärgert, als er sich weigerte mit uns zu teilen.</align>
<align>Ich konnte mich nicht einfach umdrehen und dasselbe mit anderen machen.</align>
<align>Eine andere Alternative, einfach aber unangenehm, war der Rechnerwelt den Rücken zukehren.</align>
<align>Auf diese Weise würden meine Kenntnisse nicht missbräuchlich genutzt werden, aber dennoch verschwendet.</align>
<align>Ich wäre zwar nicht Schuld an der Spaltung und Beschränkung von Rechnernutzern, aber es würde dennoch passieren.</align>
<align>Also suchte ich nach einem Weg, auf dem ein Programmierer etwas Gutes bewirken kann.</align>
<align>Ich fragte mich, ob es ein Programm oder Programme gab, das oder die ich schreiben könnte, um so noch einmal eine Gemeinschaft möglich zu machen.</align>
<align>Die Antwort war klar: was zuerst erforderlich war, war ein Betriebssystem.</align>
<align>Das ist die entscheidende Software, um anzufangen, einen Rechner zu benutzen.</align>
<align>Mit einem Betriebssystem kann man viele Dinge machen, ohne kann man den Rechner überhaupt nicht benutzen.</align>
<align>Mit einem freien Betriebssystem könnten wir wieder eine Gemeinschaft von zusammenarbeitenden Hackern haben ‑ und jeden einladen, sich uns anzuschließen.</align>
<align>Und jedermann wäre in der Lage einen Rechner zu benutzen, ohne auf verschwörerische Weise zu beginnen seine oder ihre Freunde zu benachteiligen.</align>
<align>Als Betriebssystementwickler hatte ich die richtigen Kenntnisse für diese Aufgabe.</align>
<align>Auch wenn ich den Erfolg nicht als garantiert ansehen konnte, wurde mir klar, dass ich auserwählt war diese Aufgabe zu übernehmen.</align>
<align>Ich entschied mich das System mit Unix kompatibel zu machen, damit es portabel wäre und Unix-Benutzer somit leichter umsteigen könnten.</align>
<align>Der Name GNU wurde, einer Hacker-Tradition folgend, als ein rekursives Akronym für GNU’s Not Unix (‚GNU ist nicht Unix‘) gewählt und wird [ˈgnuː] ausgesprochen.</align>
<align>Ein Betriebssystem bedeutet nicht nur einen Betriebssystemkern ‑ kaum genug, um andere Programme auszuführen.</align>
<align>In den 1970ern umfasste jedes Betriebssystem, das diesen Namen verdiente, Befehlsinterpreter, Assembler, Compiler, Interpreter, Debugger, Texteditoren, E-Mail-Anwendungen und vieles mehr.</align>
<align>ITS, Multics, VMS und Unix hatten sie.</align>
<align>Das GNU-Betriebssystem würde sie auch umfassen.</align>
<align>Später hörte ich diese Wörter, zurückgeführt auf Hillel[2]:</align>
<align>„Wenn ich nicht für mich bin, wer wird für mich sein?</align>
<align>Wenn ich nur für mich bin, was bin ich dann?</align>
<align>Wenn nicht jetzt, wann?“</align>
<align>Der Entschluss, mit dem GNU-Projekt zu beginnen, beruhte auf einem ähnlichen Geist.</align>
<align>Es geht um Freiheit.</align>
<align>Hier deshalb die Freie-Software-Definition.</align>
<align>Ein Programm ist Freie Software, für Sie, einem besonderen Benutzer, wenn:</align>
<align>Sie die Freiheit haben, das Programm auszuführen wie Sie möchten, für jeden Zweck;
Sie die Freiheit haben, das Programm an Ihre Bedürfnisse anzupassen (um diese Freiheit in der Praxis umzusetzen, muss man Zugang zum Quellcode haben, denn Programmänderungen ohne Quellcode sind außerordentlich schwierig);
Sie die Freiheit haben, Kopien weiterzuverbreiten, entweder gratis oder gegen eine Gebühr;
Sie die Freiheit haben, modifizierte Programmversionen zu distribuieren, damit die Gemeinschaft von Ihren Verbesserungen profitieren kann.</align>
<align>Da sich frei auf Freiheit bezieht, nicht auf den Preis, gibt es keinen Widerspruch zwischen Freie Software und dem Verkauf von Kopien.</align>
<align>Tatsächlich ist die Freiheit, Kopien zu verkaufen, entscheidend: Sammlungen von auf CD-ROMs verkaufter freier Software sind für die Gemeinschaft wichtig und der Verkauf ein wichtiger Weg, um mehr in die Freie-Software-Entwicklung zu investieren.</align>
<align>Daher ist ein Programm, das man diesen Sammlungen nicht frei aufnehmen kann, keine freie Software.</align>
<align>Aufgrund der Mehrdeutigkeit von frei hat man lange nach Alternativen gesucht, aber niemand hat einen besseren Begriff gefunden.</align>
<align>Die englische Sprache hat mehr Wörter und Nuancen als jede andere, aber es fehlt ein einfaches, eindeutiges Wort, das frei wie in Freiheit bedeutet ‑ uneingeschränkt ist ein Wort, das dieser Bedeutung am nächsten kommt.</align>
<align>Derartige Alternativen wie befreit, Freiheit und offen haben entweder die falsche Bedeutung oder einen anderen Nachteil.</align>
<align>GNU-Software und das GNU-System
Die Entwicklung eines ganzen Systems ist ein sehr großes Projekt.</align>
<align>Um es erreichbar zu machen, beschloss ich, vorhandene Teile freier Software anzupassen und zu nutzen, wo immer das möglich war.</align>
<align>Beispielsweise entschied ich mich gleich am Anfang hauptsächlich TeX als Textsatzsystem zu nutzen; einige Jahre später beschloss ich, das X Window System (X11) zu nutzen, anstatt ein anderes Fenstersystem für GNU zu schreiben.</align>
<align>Aufgrund dieser (und anderer ähnlicher) Entscheidungen ist das GNU-System nicht das Gleiche wie die Sammlung aller GNU-Software.</align>
<align>Das GNU-System umfasst Programme, die nicht GNU-Software sind, Programme, die von anderen Personen und Projekten für deren eigene Zwecke entwickelt wurden ‑ aber die wir verwenden können, weil sie freie Software sind.</align>
<align>Der Anfang des Projekts
Im Januar 1984 kündigte ich meinen Job am MIT und begann GNU-Software zu schreiben.</align>
<align>Das MIT zu verlassen war notwendig, damit es nicht in der Lage gewesen wäre, sich in den Vertrieb von GNU als freie Software einzumischen.</align>
<align>Wäre ich als Mitarbeiter geblieben, hätte das MIT Anspruch auf die Arbeit selbst erheben, eigene Vertriebsbedingungen festlegen oder die Arbeit sogar in ein proprietäres Softwarepaket umwandeln können.</align>
<align>Ich hatte nicht die Absicht eine Menge Arbeit zu erledigen, um dann zu sehen, wie sie für den eigentlichen Zweck nutzlos wird: das Schaffen einer neuen Software teilenden Gemeinschaft.</align>
<align>Allerdings lud mich Professor Winston, der damalige Leiter des MIT AI Lab, freundlicherweise ein, weiterhin die Einrichtung des Labors zu nutzen.</align>
<align>Die ersten Schritte
Kurz vor Beginn des GNU-Projekts hörte ich vom Free University Compiler Kit, auch als VUCK bekannt (das niederländische Wort für frei fängt mit einem ‚v‘, für ‚vrij‘, an).</align>
<align>Das war ein Compiler, entwickelt, um mehrere Programmiersprachen, darunter C und Pascal, zu verarbeiten und mehrere Zielplattformen zu unterstützten.</align>
<align>Ich schrieb dem Autor und fragte, ob das Programm für GNU genutzt werden könne.</align>
<align>Er antwortete spöttisch und gab an, dass die Universität frei wäre, nicht aber der Compiler.</align>
<align>Ich beschloss daher, dass mein erstes Programm für das GNU-Projekt ein mehrsprachiger, plattformübergreifender Compiler sein würde.</align>
<align>In der Hoffnung, nicht notwendigerweise den ganzen Compiler selbst neu schreiben zu müssen, erhielt ich schließlich den Quellcode des Pastel Compilers, einem plattformübergreifenden Compiler, der am Lawrence Livermore Laboratory entwickelt wurde.</align>
<align>Er unterstützte nicht nur eine erweiterte Version von Pascal, sondern war auch in dieser als Systemprogrammiersprache geschrieben.</align>
<align>Ich fügte ein C-Frontend hinzu und begann die Portierung auf den Motorola 68000-Rechner.</align>
<align>Als ich entdeckte, dass der Compiler mehrere Megabyte Stack-Speicher benötigte und das verfügbare 68000 Unix-System nur 64k erlauben würde, musste ich allerdings aufgeben.</align>
<align>Dann fand ich heraus, dass der Pastel Compiler die gesamte Eingabedatei durch Analyse in einen Syntaxbaum umwandelte, den gesamten Syntaxbaum in eine Kette von Anweisungen umwandelte und dann die ganze Ausgabedatei generierte, ohne jemals irgendwelchen Speicher wieder freizugeben.</align>
<align>An diesem Punkt entschloss ich mich, einen neuen Compiler von Grund auf neu zu schreiben.</align>
<align>Dieser neue Compiler ist heute als GNU Compiler Collection (GCC) bekannt. Nichts vom Pastel Compiler wurde darin genutzt, aber ich schaffte es, das C-Frontend, welches ich geschrieben hatte, anzupassen und zu nutzen.</align>
<align>Aber das war erst einige Jahre später, zuerst arbeitete ich an GNU Emacs.</align>
<align>GNU Emacs
Ich begann die Arbeit an GNU Emacs im September 1984, Anfang 1985 fing er an brauchbar zu werden.</align>
<align>Das ermöglichte mir für das weitere Schreiben Unix-Systeme zu nutzen.</align>
<align>Kein Interesse habend die Verwendung von Vi oder Ed zu erlernen, hatte ich meine Bearbeitung bis dahin auf anderen Rechnern erledigt.</align>
<align>Zu diesem Zeitpunkt begann man GNU Emacs nutzen zu wollen, was die Frage aufwarf, wie der Vertrieb aussehen sollte.</align>
<align>Natürlich war er von einem anonymen FTP-Server des MIT, den ich nutzte, abrufbar (dieser Rechner, prep.ia.mit.edu, wurde daher zur wichtigsten FTP-Vertriebsseite von GNU. Als er ein paar Jahre später stillgelegt wurde, transferierten wir den Namen auf unseren neuen FTP-Server). Aber damals hatten viele Interessierte noch keinen Internetzugang und konnten keine Kopie per FTP abrufen.</align>
<align>Also stellte sich die Frage, was ich ihnen sagen würde.</align>
<align>Ich hätte sagen können: „Finden Sie einen Freund, der im Netz ist und eine Kopie für Sie machen kann.“ Oder ich hätte gemacht, was ich mit dem ursprünglichen PDP-10 Emacs praktizierte: „Übersenden Sie mir ein Magnetband mit einem adressierten und frankierten Rückumschlag, und ich sende es mit Emacs darauf zurück.“ Aber ich hatte keine Anstellung und suchte nach Wegen, mit freier Software Geld zu verdienen.</align>
<align>Also kündigte ich an, jedem gegen eine Gebühr von 150 US-Dollar ein Magnetband zu senden.</align>
<align>Auf diese Weise begann ich einen geschäftlichen Vertrieb mit freier Software, dem Vorläufer der Unternehmen, die heute ganze GNU/Linux-Distributionen verbreiten.</align>
<align>Ist ein Programm für jeden Benutzer frei?</align>
<align>Wenn ein Programm, wenn es die Hände des Autors verlässt, Freie Software ist, bedeutet dies nicht notwendigerweise, dass es für jedermann freie Software sein wird, die eine Kopie davon besitzen.</align>
<align>Beispielsweise ist Public-Domain-Software (Software, die nicht dem Urheberrecht unterliegt)[*] Freie Software, aber jeder kann eine proprietäre modifizierte Version davon erstellen.</align>
<align>Ebenfalls sind viele freie Programme mit einem Copyright versehen, aber unter einfachen freizügigen Lizenzen, die proprietäre modifizierte Versionen ermöglichen.</align>
<align>Das paradigmatische Beispiel dieses Problems ist das X Window System (X11).</align>
<align>Am MIT entwickelt und als Freie Software mit einer freizügigen Lizenz freigegeben, wurde es bald von verschiedenen Rechnerfirmen adaptiert.</align>
<align>Sie fügten X11 nur in binärer Form ihren proprietären Unix-Systemen hinzu ‑ mit einer Vertraulichkeitsvereinbarung.</align>
<align>Diese X11-Kopien waren wie Unix keine freie Software mehr.</align>
<align>Die Entwickler von X11 betrachteten dies nicht als ein Problem ‑ sie erwarteten und beabsichtigten es sogar.</align>
<align>Ziel war nicht Freiheit, nur Erfolg, definiert als viele Benutzer habend. Es kümmerte nicht, ob diese Freiheit hatten, sie sollten nur zahlreich sein.</align>
<align>Das führte zu einer paradoxen Situation, in der zwei unterschiedliche Sichtweisen, das Maß an Freiheit zu messen, verschiedene Antworten auf die Frage ergaben, „Ist das Programm frei?“ Würde man Freiheit nach den Vertriebsbedingungen des MIT beurteilen, würde man sagen, dass X11 freie Software war.</align>
<align>Aber gemessen an der Freiheit des durchschnittlichen X11-Benutzer müsste man sagen, es war proprietäre Software.</align>
<align>Die meisten X11-Benutzer führten die proprietären Versionen aus, die mit unfreien Unix-Systemen kamen, nicht die freie Version.</align>
<align>Copyleft und die GNU GPL
Das Ziel von GNU war den Benutzern Freiheit zu geben, nicht nur beliebt zu sein.</align>
<align>Also mussten wir Vertriebsbedingungen verwenden, die verhindern würden, GNU-Software in proprietäre Software umzuwandeln.</align>
<align>Die Methode, die wir verwenden, wird Copyleft genannt.(3)</align>
<align>Copyleft nutzt das Urheberrecht, aber wendet es auf gegenteilige Weise des üblichen Zwecks an: statt einem Mittel zur Beschränkung eines Programms wird es zu einem Mittel, damit das Programm frei bleibt.</align>
<align>Der Kerngedanke von Copyleft ist, jedem die Berechtigung zu geben, das Programm ausführen, kopieren, modifizieren und modifizierte Versionen verbreiten zu dürfen ‑ aber nicht die Berechtigung Beschränkungen hinzuzufügen.</align>
<align>Damit werden entscheidende Freiheiten, die Freie Software definieren, an jedermann garantiert, wer eine Kopie besitzt. Sie werden unveräußerliche Rechte.</align>
<align>Für ein effektives Copyleft müssen modifizierte Versionen ebenfalls frei sein.</align>
<align>Dadurch wird sichergestellt, dass das abgeleitete Werk unserer Gemeinschaft verfügbar wird, wenn es veröffentlicht wird.</align>
<align>Wenn Programmierer, die als solche arbeiten, freiwillig GNU-Software verbessern, ist es das Copyleft, was ihre Arbeitgeber davon abhält zu sagen: „Sie können diese Änderungen nicht mit anderen austauschen, weil wir sie nutzen werden, um unsere proprietäre Version des Programms daraus zu machen.“</align>
<align>Die Anforderung, das Änderungen frei sein müssen, ist unerlässlich, wenn wir Freiheit für jeden Programmnutzer gewähren wollen.</align>
<align>Die Unternehmen, die X11 privatisiert haben, machten für gewöhnlich einige Änderungen, um es auf ihre Systeme und ihre Hardware zu portieren.</align>
<align>Diese Änderungen waren im Vergleich mit dem großen Umfang von X11 gering, aber sie waren nicht trivial.</align>
<align>Wenn gemachte Änderungen Vorwand wären, um den Nutzern Freiheit zu versagen, wäre es für jedermann einfach, die Vorteile als Vorwand auszunutzen.</align>
<align>Ein ähnliches Problem betrifft die Kombination eines freien Programms mit unfreiem Quellcode.</align>
<align>Solch eine Kombination wäre zwangsläufig unfrei!</align>
<align>Welche Freiheiten auch immer dem unfreien Teil fehlt, würde dem Ganzen auch fehlen.</align>
<align>Solche Kombinationen zu erlauben, würde ein Loch öffnen, groß genug, um ein Schiff darin zu versenken.</align>
<align>Daher ist eine unabdingbare Anforderung für Copyleft, dieses Loch zu stopfen: etwas einem mit Copyleft versehenem Programm hinzuzufügen oder zu kombinieren muss so erfolgen, dass die daraus größere kombinierte Version ebenfalls frei und mit Copyleft ist.</align>
<align>Die konkrete Umsetzung des Copyleft, die wir für die meiste GNU-Software verwenden, ist die GNU General Public License, kurz GNU GPL. Wir haben auch noch andere Arten des Copyleft, die unter bestimmten Umständen verwendet werden.</align>
<align>GNU-Handbücher sind ebenfalls mit Copyleft versehen, verwenden aber ein viel einfacheres Copyleft, weil die Komplexität der GNU GPL für Handbücher nicht notwendig ist.(4)</align>
<align>Free Software Foundation
Da das Interesse an der Nutzung von Emacs wuchs, andere Personen am GNU-Projekt beteiligt wurden und wir beschlossen, dass es Zeit war erneut nach finanziellen Mitteln zu suchen, schufen wir 1985 die Free Software Foundation (FSF), eine gemeinnützige Stiftung für die Freie-Software-Förderung und -Entwicklung.</align>
<align>Die FSF übernahm auch das Vertriebsgeschäft der Emacs-Magnetbänder.</align>
<align>Später wurde dies durch Hinzufügen weiterer freier Software zum Magnetband (sowohl GNU als auch GNU-fremder) und natürlich durch den Verkauf freier Handbücher erweitert.</align>
<align>Der größte Teil der Einnahmen der FSF kam aus den Verkäufen von Kopien freier Software und anderen damit zusammenhängenden Diensten (CD-ROMs mit Quellcode oder Binärdateien, schön gedruckten Handbüchern, alle mit der Freiheit weitergegeben und modifiziert zu werden) und Deluxe-Distributionen (in denen wir eine ganze Softwaresammlung nach Wahl des Kunden je nach Plattform zusammenstellten).</align>
<align>Noch heute vertreibt die FSF Handbücher und andere Utensilien, erhält aber den Großteil ihrer Mittel aus Mitgliedsbeiträgen.</align>
<align>Sie können der FSF unter FSF.org beitreten.</align>
<align>Mitarbeiter der Free Software Foundation haben eine Reihe von GNU-Softwarepaketen geschrieben und betreut.</align>
<align>Zwei beachtenswerte sind die C-Bibliothek und die Eingabeaufforderung.</align>
<align>Die GNU C-Bibliothek wird von jedem auf einem GNU/Linux-System ausgeführten Programm genutzt, um mit Linux zu kommunizieren.</align>
<align>Sie wurde von einem Mitarbeiter der Free Software Foundation, Roland McGrath, entwickelt.</align>
<align>Der auf den meisten GNU/Linux-Systemen genutzte Befehlszeileninterpreter ist Bourne Again Shell (BASH)[5], entwickelt von Brian Fox, einem FSF-Mitarbeiter.</align>
<align>Wir finanzierten die Entwicklung dieser Programme, weil es beim GNU-Projekt nicht nur um Dienstprogramme oder eine Entwicklungsumgebung ging.</align>
<align>Unser Ziel war ein vollständiges Betriebssystem, und diese Programme waren für dieses Ziel erforderlich.</align>
<align>Freie-Software-Unterstützung
Die Freie-Software-Philosophie lehnt eine bestimmte weitverbreitete Geschäftspraxis ab, aber ist nicht gegen das Geschäft.</align>
<align>Wenn Geschäfte die Freiheit der Nutzer respektieren, wünschen wir ihnen Erfolg.</align>
<align>Der Verkauf von Emacs-Kopien veranschaulicht eine Art von Freie-Software-Geschäft.</align>
<align>Als die FSF dieses Geschäft übernahm, brauchte ich einen anderen Weg, um meinen Lebensunterhalt zu bestreiten.</align>
<align>Ich fand ihn im Anbieten von Dienstleistungen in Zusammenhang mit der freien Software, die ich entwickelt hatte.</align>
<align>Dies beinhaltete die Unterweisung zu Themen wie man beispielsweise GNU Emacs programmiert und GCC anpasst und Softwareentwicklung, hauptsächlich das Portieren von GCC auf neue Plattformen.</align>
<align>Heutzutage wird jede Art von Freie-Software-Geschäft von einer Reihe von Unternehmen praktiziert.</align>
<align>Einige vertreiben Freie-Software-Sammlungen auf CD-ROM. Andere bieten Unterstützung, angefangen mit der Beantwortung von Benutzerfragen, Beseitigung von Programmfehlern, Hinzufügen neuer Programmfunktionen.</align>
<align>Wir fangen sogar an Freie-Software-Unternehmen zu sehen, die aufgrund neuer Freie-Software-Produkte gegründet werden.</align>
<align>Passen Sie dennoch auf: Obwohl es eine Reihe von Unternehmen gibt, die sich dem Begriff „Open Source“ verbunden fühlen, basiert ihr Geschäft tatsächlich auf unfreier Software, die mit freier Software arbeitet.</align>
<align>Das sind keine Freie-Software-Unternehmen, sondern proprietäre Softwareunternehmen, deren Produkte Benutzer von Freiheit weg in Versuchung führen.</align>
<align>Sie nennen diese Programme Mehrwertpakete, die die Werte widerspiegeln, die sie gerne als von uns adaptiert sehen würden: Nutzen über Freiheit.</align>
<align>Wenn wir Freiheit höher schätzen, sollten sie freiheitsentziehende Pakete genannt werden.</align>
<align>Technische Ziele
Das primäre Ziel von GNU soll Freie Software sein.</align>
<align>Selbst wenn GNU keinen technischen Vorteil gegenüber Unix hätte, gäbe es einen sozialen Vorteil, der Nutzern erlaubt zusammenzuarbeiten, und einen ethischen Vorteil, der die Freiheit des Nutzers respektiert.</align>
<align>Aber es war selbstverständlich, die bekannten Standards guter Praxis auf die Arbeit anzuwenden ‑ etwa die dynamische Zuweisung von Datenstrukturen, um willkürliche feste Größenbegrenzungen zu vermeiden, und die Handhabung aller möglichen 8-Bit-Codes, wann immer das Sinn macht.</align>
<align>Darüber hinaus lehnten wir den Unix-Fokus auf kleine Speichergrößen ab und entschieden, 16-Bit-Rechner nicht zu unterstützen (es war klar, dass 32-Bit-Rechner Standard sind, wenn das GNU-System fertig wäre) und keine Anstrengungen zu machen die Speichernutzung zu verringern, wenn es einen Megabyte überstieg.</align>
<align>In Programmen, für die die Behandlung von großen Dateien nicht entscheidend war, ermutigten wir Programmierer die gesamte Eingabedatei in den Prozessorkern einzulesen, dann seinen Inhalt zu überprüfen, ohne sich um Ein- und Ausgabe kümmern zu müssen.</align>
<align>Diese Entscheidungen ermöglichten vielen GNU-Programmen, ihre Unix-Gegenstücke in Zuverlässigkeit und Geschwindigkeit zu übertreffen.</align>
<align>Gespendete Rechner
Als der Ruf des GNU-Projekts wuchs, begann man Rechner als Spende für das Projekt anzubieten, die unter Unix liefen.</align>
<align>Diese waren sehr nützlich, weil der einfachste Weg, die Entwicklung von GNU-Komponenten auf einem Unix-System zu tun, und dessen Komponenten eins nach dem anderen zu ersetzen ‑ eine nach der anderen.</align>
<align>Aber das löste eine ethische Frage aus: ob es für uns richtig war, überhaupt eine Kopie von Unix zu besitzen.</align>
<align>Unix war (und ist) proprietäre Software, und die Philosophie des GNU-Projekts besagt, dass wir keine proprietäre Software nutzen sollten.</align>
<align>Aber die gleiche Argumentation anwendend, die zu der Schlussfolgerung führt, dass Gewalt als Selbstverteidigung gerechtfertigt sei, schloss ich, dass es legitim wäre, ein proprietäres Paket zu nutzen, wenn das für die Entwicklung eines freien Ersatzes entscheidend war, der anderen helfen würde, das proprietäre Paket nicht mehr zu verwenden.</align>
<align>Aber selbst wenn dies ein gerechtfertigtes Übel war, war es immer noch ein Übel.</align>
<align>Heute haben wir nicht mehr irgendwelche Kopien von Unix, weil wir sie durch freie Betriebssysteme ersetzten.</align>
<align>Konnten wir das Betriebssystem eines Rechners nicht ersetzen, ersetzten wir stattdessen den Rechner.</align>
<align>GNU-Aufgabenliste
Mit Fortschreiten des GNU-Projekts und immer mehr gefundenen oder entwickelten Systemkomponenten wurde schließlich eine Liste der verbleibenden Lücken notwendig.</align>
<align>Wir verwendeten sie, um Entwickler zu rekrutieren, fehlende Teile zu schreiben.</align>
<align>Diese Liste wurde als GNU-Aufgabenliste bekannt.</align>
<align>Zusätzlich zu fehlenden Unix-Komponenten führten wir verschiedene andere nützliche Software- und Dokumentationsprojekte auf, die unserer Meinung nach ein Gesamtsystem haben sollte.</align>
<align>Heute sind kaum noch Unix-Komponenten in der GNU Task List[6] vorhanden ‑ diese sind, abgesehen von ein paar unwichtigen, abgearbeitet.</align>
<align>Aber die Liste ist voll von Projekten, die manche „Anwendungen“ nennen mögen.</align>
<align>Jedes Programm, das mehr als nur eine kleine Benutzergruppe anspricht, wäre sinnvoll, um es einem Betriebssystem hinzuzufügen.</align>
<align>Sogar Spiele sind in der Aufgabenliste enthalten ‑ und sind von Anfang an dabei.</align>
<align>Unix enthielt Spiele, also sollte GNU natürlich auch welche enthalten.</align>
<align>Da aber Kompatibilität kein Problem für Spiele war, mussten wir der Liste der Spiele nicht folgen, die Unix hatte.</align>
<align>Stattdessen führten wir ein Spektrum verschiedener möglicher Spiele auf, die Benutzer mögen würden.</align>
<align>GNU Library GPL
Die GNU C-Bibliothek nutzt eine spezielle Art des Copyleft namens GNU Library General Public License (LGPL), die die Berechtigung erteilt, proprietäre Software mit der Bibliothek zu verbinden.(7) Warum diese Ausnahme?</align>
<align>Es ist keine Frage des Prinzips.</align>
<align>Es gibt kein Prinzip, das proprietäre Softwareprodukte berechtigt unseren Quellcode einzubinden (warum zu einem Projekt beitragen, welches sich weigert, sich mit uns auszutauschen?).</align>
<align>Die LGPL für die C-Bibliothek (oder für jedwede Bibliothek) zu verwenden, ist eine Frage der Strategie.</align>
<align>Die C-Bibliothek erfüllt eine allgemeine Aufgabe.</align>
<align>Jedes proprietäre System oder jeder Compiler kommt mit einer C-Bibliothek.</align>
<align>Deshalb hätte, wäre unsere C-Bibliothek ausschließlich für Freie Software verfügbar, dieser keinen Vorteil bringen ‑ es hätte nur von der Nutzung unserer Bibliothek abgehalten.</align>
<align>Ein System ist eine Ausnahme: in einem GNU-System (und dies schließt GNU/Linux ein) ist die GNU C-Bibliothek die einzige C-Bibliothek.</align>
<align>Die Vertriebsbedingungen der GNU C-Bibliothek bestimmen, ob es möglich ist, ein proprietäres Programm für das GNU-System zu kompilieren.</align>
<align>Es gibt keinen ethischen Grund, proprietäre Anwendungen auf einem GNU-System zu ermöglichen, aber strategisch gesehen scheint es, dass das Verbieten eher von der Nutzung des GNU-Systems abhält, als die Entwicklung freier Anwendungen zu fördern.</align>
<align>Deshalb ist die Verwendung der Library GPL eine gute Strategie für die C-Bibliothek.</align>
<align>Für andere Bibliotheken muss die strategische Entscheidung individuell getroffen werden.</align>
<align>Wenn eine Bibliothek bei einer speziellen Aufgabe helfen kann, bestimmte Arten von Programmen zu schreiben und dann unter der GPL freizugeben ‑ auf lediglich freie Programme begrenzt ‑ ist das ein Weg, anderen Freie-Software-Entwicklern zu helfen und einen Vorteil gegenüber proprietäre Software zu geben.</align>
<align>Betrachten wir GNU Readline, eine Bibliothek, die entwickelt wurde, um für BASH die Befehlszeilenbearbeitung zu ermöglichen.</align>
<align>Readline wird unter der gewöhnlichen GNU GPL vertrieben, nicht unter der Library GPL. Das reduziert möglicherweise die Häufigkeit, mit der Readline benutzt wird, aber das ist kein Verlust für uns.</align>
<align>Inzwischen wurde mindestens eine nützliche Anwendung ausdrücklich zu freier Software gemacht, damit sie Readline nutzen kann, und das ist ein echter Gewinn für die Gemeinschaft.</align>
<align>Entwickler proprietärer Software haben die Vorteile, die Geld ermöglicht; Entwickler freier Software müssen sich gegenseitig Vorteile für einander verschaffen.</align>
<align>Ich hoffe, wir haben eines Tages eine große Sammlung GPL-lizenzierter Bibliotheken, die keine Parallelen zu verfügbarer proprietärer Software bilden, nützliche Module liefern, die als Bausteine in neuer freier Software dienen und sich zu einem größeren Vorteil für die weitere Freie-Software-Entwicklung summieren.</align>
<align>Sie stammen aus einer Vision und einem Plan, nicht aus einem Impuls heraus.</align>
<align>Beispielsweise wurde die C-Bibliothek entwickelt, weil ein unixartiges System eine C-Bibliothek braucht, BASH, weil ein unixoides System einen Befehlszeileninterpreter braucht, und GNU Tar, weil ein unixoides System ein Archivierungsprogramm braucht.</align>
<align>Gleiches gilt für die von mir geschriebenen Programme ‑ den GNU C-Compiler, GNU Emacs, GDB und GNU Make.</align>
<align>Einige GNU-Programme wurden entwickelt, um bestimmte Bedrohungen unserer Freiheit zu bewältigen.</align>
<align>So entwickelten wir GZIP, um das Komprimierungsprogramm zu ersetzen, das der Gemeinschaft wegen der Patente auf LZW-verloren gegangen war.</align>
<align>Wir fanden Menschen um LessTif zu entwickeln und begannen vor kurzem mit der Entwicklung von GNOME und Harmony, um die durch bestimmte proprietäre Bibliotheken verursachten Probleme anzugehen (siehe unten).</align>
<align>Wir entwickelten den GNU Privacy Guard, um eine beliebte unfreie Verschlüsselungssoftware zu ersetzen, weil Benutzer nicht zwischen Privatsphäre und Freiheit sollten wählen müssen.</align>
<align>Die Personen, die diese Programme schrieben, interessierten sich natürlich für die Arbeit, und viele Funktionen wurden von verschiedenen Personen aufgrund eigener Anforderungen und Interessen hinzugefügt.</align>
<align>Doch darum existieren die Programme nicht.</align>
<align>Unerwartete Entwicklungen
Zu Beginn des GNU-Projekts stellte ich mir vor, wir würden das gesamte GNU-System entwickeln und dann als Ganzes freigeben.</align>
<align>So ist es nicht gekommen.</align>
<align>Da jede Komponente des GNU-Systems auf einem Unix-System umgesetzt wurde, konnte jede auf einem Unix-System ausgeführt werden, lange bevor ein komplettes GNU-System existierte.</align>
<align>Einige dieser Programme wurden populär und Benutzer begannen sie zu erweitern und zu portieren ‑ auf die verschiedenen inkompatiblen Versionen von Unix und manchmal auch auf andere Systeme.</align>
<align>Dieser Vorgang machte diese Programme sehr viel mächtiger und zog sowohl Gelder als auch Mitwirkende zum GNU-Projekt.</align>
<align>Aber er verzögerte möglicherweise auch die Fertigstellung eines minimal funktionierenden Systems um mehrere Jahre, da GNU-Entwickler Zeit in die Betreuung dieser Schnittstellen und zusätzliche Funktionen zu bestehenden Komponenten aufbrachten, anstatt eine fehlende Komponente nach der anderen zu schreiben.</align>
<align>GNU Hurd
Um 1990 war das GNU-System fast fertig. Die einzige größere fehlende Komponente war der Betriebssystemkern.</align>
<align>Wir hatten beschlossen, unseren Systemkern als eine Sammlung von Serverprozessen zu implementieren, die auf dem Mach laufen.</align>
<align>Mach ist ein an der Carnegie Mellon-Universität und dann an der Universität von Utah entwickelter Mikrokern. GNU HURD ist eine Sammlung von Servern (d. h. eine Herde GNUs), die auf dem Mach laufen und verschiedene Aufgaben des Unix-Betriebssystemkerns erledigen.</align>
<align>Der Beginn der Entwicklung wurde verzögert, da wir, wie versprochen wurde, auf die Freigabe von Mach als Freie Software warteten.</align>
<align>Ein Grund für die Wahl dieses Designs war zu vermeiden, was, wie es schien, der schwierigste Teil der Aufgabe war: Ein Systemkernprogramm ohne einen Source-Level-Debugger zu debuggen [Diagnose auf Quelltextebene].</align>
<align>Dieser Teil der Aufgabe war bereits im Mach erledigt, und wir erwarteten die HURD-Server als Benutzerprogramme mit GDB zu debuggen.</align>
<align>Aber es brauchte lange Zeit, um dies zu ermöglichen und die Multithread-Server, die sich gegenseitig Nachrichten senden, sich als sehr schwierig zu debuggen erwiesen haben. Den HURD zum soliden Arbeiten zu bringen, zog sich über mehrere Jahre hin.</align>
<align>Alix
Der GNU-Betriebssystemkern sollte ursprünglich nicht HURD genannt werden.</align>
<align>Sein ursprünglicher Name war Alix ‑ benannt nach der Frau, die damals mein Schatz war.</align>
<align>Sie, eine Unix-Systemadministratorin, hatte darauf hingewiesen wie ihr Name in ein allgemeines Namensmuster für Unix-Systemversionen passen würde.</align>
<align>Jemand sollte einen Systemkern nach mir benennen witzelte sie unter Freunden. Ich sagte nichts dazu, aber beschloss sie mit einem Systemkern namens Alix zu überraschen.</align>
<align>Es blieb nicht dabei.</align>
<align>Michael Bushnell (heute Thomas Bushnell), der Hauptentwickler des Systemkerns, bevorzugte den Namen HURD und definierte Alix neu, um auf einen bestimmen Teil des Systemkerns zu verweisen ‑ den Teil, der Systemaufrufe abfangen und diese durch Senden von Nachrichten an die Hurd-Server behandeln würde.</align>
<align>Später trennten sich unsere Wege und Alix änderte ihren Nachnamen; unabhängig davon wurde das HURD-Design geändert, damit die C-Bibliothek Nachrichten direkt an die Server senden würde, und das ließ die Alix-Komponente aus dem Design verschwinden.</align>
<align>Doch bevor diese Dinge passierten, stieß ein Freund von ihr auf den Namen Alix im HURD-Quellcode und erwähnte es ihr gegenüber.</align>
<align>Sie hatte also die Chance, einen nach ihr benannten Systemkern zu finden.</align>
<align>Linux und GNU/Linux
GNU Hurd ist nicht für den produktiven Einsatz geeignet und wir wissen nicht, ob es jemals so sein wird.</align>
<align>Das fähigkeitsbasierte Konzept hat Probleme, die sich direkt aus der Flexibilität des Konzepts ergeben und es ist nicht klar, ob Lösungen existieren.</align>
<align>Glücklicherweise ist ein anderer Betriebssystemkern verfügbar.</align>
<align>Im Jahr 1991 entwickelte Linus Torvalds einen Unix-kompatiblen Systemkern und nannte ihn Linux.</align>
<align>Es war zunächst proprietär, aber im Jahr 1992 machte er es zu Freie Software.</align>
<align>Die Kombination von Linux mit dem noch nicht ganz fertigen GNU-System führte zu einem vollständig freien Betriebssystem (die Kombination war natürlich eine erhebliche Aufgabe an sich).</align>
<align>Es ist Linux zu verdanken, dass wir heute tatsächlich eine Version des GNU-Systems verwenden können.</align>
<align>Wir nennen diese Version des Systems GNU/Linux, um dessen Zusammensetzung als Kombination aus dem GNU-System mit Linux als Systemkern auszudrücken.</align>
<align>Bitte verfallen Sie nicht der Praxis, das Gesamtsystem „Linux“ zu nennen, da das fälschlicherweise unsere Arbeit auf jemand anderen zurückführt.</align>
<align>Bitte geben Sie uns eine ebensolche Erwähnung.</align>
<align>Herausforderungen in der Zukunft
Wir haben unsere Fähigkeit, ein breites Spektrum an freier Software zu entwickeln, bewiesen.</align>
<align>Das bedeutet nicht, wir seien unbesiegbar und unaufhaltsam. Verschiedene Herausforderungen machen die Zukunft von freier Software unsicher; sie zu erfüllen, erfordert unerschütterliche Anstrengungen und Durchhaltevermögen, manchmal für Jahre.</align>
<align>Es ist die Art von Entschlossenheit erforderlich, die Menschen zeigen, wenn sie ihre Freiheit schätzen und sich von niemanden wegnehmen lassen.</align>
<align>Die folgenden vier Abschnitte erörtern diese Herausforderungen.</align>
<align>Geheime Hardware
Hardwarehersteller tendieren zunehmend dazu, Hardwarespezifikationen geheim zu halten.</align>
<align>Das macht es schwierig, freie Treiber zu schreiben, damit Linux und XFree86 neue Hardware unterstützen können.</align>
<align>Wir haben heute vollständig freie Systeme, aber wir werden sie morgen nicht mehr haben, wenn wir die Rechner von morgen nicht unterstützen können.</align>
<align>Es gibt zwei Wege, um mit diesem Problem fertig zu werden.</align>
<align>Die Programmierer können mit Reverse Engineering ‚Nachkonstruktion‘ herausfinden, wie man die Hardware unterstützen kann.</align>
<align>Der Rest von uns kann die Hardware wählen, die von freier Software unterstützt wird; bei steigender Nutzerzahl wird das Geheimhalten der Spezifikationen eine selbstzerstörerische Politik.</align>
<align>Reverse Engineering ist eine äußerst umfangreiche Aufgabe. Werden wir Programmierer mit ausreichender Entschlossenheit haben, dies zu übernehmen?</align>
<align>Ja, wenn wir ein starkes Gefühl aufgebaut haben, dass freie Software eine Frage des Prinzips ist und unfreie Treiber unerträglich sind.</align>
<align>Und werden viele zusätzliches Geld spenden oder sogar ein wenig mehr Zeit, damit wir freie Treiber nutzen können?</align>
<align>Ja, wenn die Entschlossenheit, Freiheit zu haben, weit verbreitet ist.</align>
<align>(Anmerkung: Dieses Problem erstreckt sich auch auf das BIOS. Es gibt ein freies BIOS namens LibreBoot.</align>
<align>Das Problem ist Spezifikationen für Rechner zu erhalten, damit LibreBoot sie ohne unfreie Binary Large Objects ‚BLOBs‘ unterstützen kann. Stand: 2008)</align>
<align>Unfreie Bibliotheken
Eine unfreie Bibliothek, die auf einem freien Betriebssystem ausgeführt wird, verhält sich für Freie-Software-Entwickler wie ein Falle.</align>
<align>Die attraktiven Funktionen der Bibliothek sind der Köder, und wenn man sie nutzt, schnappt die Falle zu, weil das Programm nicht nutzbringend Teil eines freien Betriebssystems sein kann (streng genommen könnte man das Programm einbinden, aber es würde mit fehlender Bibliothek unmöglich ausgeführt werden können).</align>
<align>Noch schlimmer ist, wenn ein Programm, das die proprietäre Bibliothek nutzt, immer beliebter wird und so andere ahnungslose Programmierer in die Falle lockt.</align>
<align>Der erste Fall dieses Problems war der Motif-Werkzeugsatz, damals in den 80ern.</align>
<align>Obwohl es noch keine freien Betriebssysteme gab, war klar, welche Probleme Motif später verursachen würde.</align>
<align>Das GNU-Projekt reagierte auf zweierlei Weise: indem einzelne Freie-Software-Projekte gebeten wurden, die freien Steuerelemente des X-Werkzeugsatzes als auch Motif zu unterstützen und indem nach jemand gesucht wurde, einen freien Ersatz für Motif zu schreiben.</align>
<align>Diese Aufgabe dauerte viele Jahre; LessTif, von ungarischen Programmierern entwickelt, unterstütze erst ab 1997 die meisten Motif-Anwendungen.</align>
<align>Zwischen 1996 und 1998 wurde eine andere Bibliothek namens Qt als unfreie grafische Benutzerschnittstelle ‚GUI‘ in einer umfangreichen Freie-Software-Sammlung, der KDE-Arbeitsumgebung, genutzt.</align>
<align>Freie GNU/Linux-Systeme waren außerstande KDE zu verwenden, denn die Bibliothek konnte nicht genutzt werden.</align>
<align>Allerdings fügten einige kommerzielle Distributoren von GNU/Linux-Systemen, die nicht streng an freier Software festhielten, KDE ihren Systemen hinzu ‑ produzierten so ein System mit mehr Möglichkeiten, aber weniger Freiheit.</align>
<align>Die KDE-Gruppe ermutigte aktiv mehr Programmierer Qt zu benutzen, und Millionen von neuen „Linux-Nutzern“ waren nie der Idee ausgesetzt worden, dass es damit ein Problem gab.</align>
<align>Die Situation war makaber.</align>
<align>Die Freie-Software-Gemeinschaft reagierte auf das Problem in zweierlei Weise: GNOME und Harmony.</align>
<align>GNOME, das GNU Network Object Model Environment, ist GNUs Projekt einer grafischen Benutzeroberflächen-Umgebung.</align>
<align>1997 von Miguel de Icaza gestartet und entwickelt mit der Unterstützung von Red Hat Software, machte sich GNOME auf den Weg, mit ausschließlich freier Software eine ähnliche Ausstattung der Arbeitsumgebung zu schaffen.</align>
<align>Es hat auch technische Vorteile wie die Unterstützung einer Vielzahl von Programmiersprachen, nicht nur C++.</align>
<align>Aber das wichtigste Ziel war Freiheit: keine unfreie Software erforderlich.</align>
<align>Harmony ist eine kompatible Ersatzbibliothek, entworfen, um zu ermöglichen, KDE-Software ohne Qt zu nutzen.</align>
<align>Im November 1998 kündigten die Entwickler von Qt eine Änderung der Lizenz an, die, wenn in die Tat umgesetzt, Qt zu freier Software machen sollte.</align>
<align>Es gibt keine Möglichkeit um sicher zu sein, aber ich denke, dass dies zum Teil durch die entschiedene Reaktion der Gemeinschaft auf das Problem, das Qt darstellte als es unfrei war, verursacht war (die neue Lizenz ist ungeeignet und ungerecht, so bleibt es wünschenswert, die Nutzung von Qt zu vermeiden).</align>
<align>(Nachträgliche Anmerkung: Im September 2000 wurde Qt unter der GNU GPL neu freigegeben, was dieses Problem im Grunde löste.)</align>
<align>Wie antworten wir auf die nächste verlockende unfreie Bibliothek?</align>
<align>Versteht die gesamte Gemeinschaft die Notwendigkeit, nicht in die Falle zu tappen?</align>
<align>Oder geben viele von uns Freiheit zugunsten Bequemlichkeit auf und erzeugen so ein größeres Problem?</align>
<align>Unsere Zukunft hängt von unserer Philosophie ab.</align>
<align>Softwarepatente
Die schlimmste Bedrohung mit der wir uns konfrontiert sehen stammt von Softwarepatenten, die für bis zu zwanzig Jahre Algorithmen und Funktionen für Freie Software tabu setzen können.</align>
<align>Die Patente für das LZW-Komprimierungsverfahren wurden 1983 beantragt, und wir können noch immer keine Freie Software freigeben, um ordnungsgemäß komprimierte GIF-Dateien (Graphics Interchange Format) zu erzeugen.(*) 1998 wurde ein freies Programm zur Produktion von komprimiertem MP3-Audio (MPEG-1 Audio Layer 3) unter Androhung einer Patentklage aus der Distribution herausgenommen.(**)</align>
<align>Es gibt Möglichkeiten, Patente zu bewältigen: man kann nach Beweisen suchen, ob ein Patent ungültig ist und nach alternativen Wegen suchen um eine Aufgabe zu lösen.</align>
<align>Aber jede dieser Methoden funktioniert nur manchmal.</align>
<align>schlagen beide fehl, kann ein Patent jegliche Freie Software dazu zwingen, dass eine Eigenschaft fehlt, die Benutzer wollen.</align>
<align>Nach einer langen Wartezeit erlöschen Patente (die MP3-Patente beispielsweise erlöschen voraussichtlich bis 2018), aber was machen wir bis dahin?</align>
<align>Diejenigen von uns, die freie Software der Freiheit wegen schätzen, bleiben sowieso bei freier Software.</align>
<align>Wir schaffen es, Aufgaben ohne patentierte Funktionen zu erledigen.</align>
<align>Aber diejenigen, die freie Software schätzen, weil sie sie als technisch überlegen erwarten, werden es wahrscheinlich einen Misserfolg nennen, wenn ein Patent davon abhält.</align>
<align>Daher, obwohl es sinnvoll ist, über die praktische Wirksamkeit des Bazaar-Entwicklungsmodells sowie der Zuverlässigkeit und Macht irgendeiner freien Software zu sprechen, dürfen wir dort nicht anhalten.</align>
<align>Wir müssen über Freiheit und Prinzipien sprechen.</align>
<align>Freie Dokumentation
Der größte Mangel an unseren freien Betriebssystemen ist nicht die Software ‑ es ist der Mangel an guten freien Handbüchern, die wir in unsere Systeme integrieren können.</align>
<align>Dokumentation ist ein wesentlicher Bestandteil jedes Softwarepakets; wenn ein wichtiges freies Softwarepaket nicht mit einem guten freien Handbuch erhältlich ist, ist das eine große Lücke.</align>
<align>Wir haben heute viele solcher Lücken.</align>
<align>Freie Dokumentation, wie freie Software, ist eine Frage der Freiheit, nicht des Preises.</align>
<align>Das Kriterium eines freien Handbuchs ist dem freier Software ziemlich ähnlich: es geht darum, allen Benutzern bestimmte Freiheiten zu gewähren.</align>
<align>Weitervertrieb (einschließlich kommerziellen Verkaufs) muss online und auf Papier erlaubt sein, damit das Handbuch jede Programmkopie begleiten kann.</align>
<align>Die Berechtigung zur Modifikation ist ebenfalls von entscheidender Bedeutung.</align>
<align>Im Allgemeinen glaube ich nicht, dass die Berechtigung notwendig ist, alle möglichen Artikel und Bücher modifizieren zu dürfen.</align>
<align>Beispielsweise denke ich nicht, dass Sie oder ich verpflichtet sind die Berechtigung zu erteilen, Artikel wie diesen zu modifizieren, der unsere Handlungen und Ansichten beschreibt.</align>
<align>Es gibt aber einen bestimmten Grund, warum die Freiheit zur Modifizierung für Dokumentation von freier Software entscheidend ist.</align>
<align>Wenn die Menschen ihr Recht ausüben, Software zu modifizieren und Funktionen zu ändern oder hinzuzufügen, wenn sie gewissenhaft sind, ändern sie das Handbuch auch ‑ damit eine genaue und nutzbare Dokumentation mit dem modifizierten Programm angeboten werden kann.</align>
<align>Ein unfreies Handbuch, dass gewissenhaften Programmierern nicht erlaubt die Aufgabe zu beenden, erfüllt nicht den Bedarf unserer Gemeinschaft.</align>
<align>Einige Einschränkungen, wie Modifikationen vorgenommen werden können, werfen keine Probleme auf.</align>
<align>Beispielsweise sind Anforderungen, den Copyright-Hinweis des Originalautors, die Vertriebsbedingungen oder die Autorenliste anzugeben, in Ordnung.</align>
<align>Es ist auch kein Problem zu verlangen, dass modifizierte Versionen einen Hinweis enthalten, dass sie modifiziert wurden, ebenso wie ganze Abschnitte vor dem Löschen oder Verändern zu schützen, solange diese Abschnitte nichttechnische Themen behandeln.</align>
<align>Diese Beschränkungen sind kein Problem, weil sie den gewissenhaften Programmierer nicht davon abhalten, das Handbuch dem modifizierten Programm anzupassen.</align>
<align>Mit anderen Worten halten sie die Freie-Software-Gemeinschaft nicht davon ab, vollen Gebrauch vom Handbuch zu machen.</align>
<align>Jedoch muss es möglich sein, den ganzen technischen Inhalt des Handbuchs zu modifizieren und das Ergebnis mit allen gängigen Medien und üblichen Kanälen zu verbreiten; andernfalls behindern die Beschränkungen die Gemeinschaft, das Handbuch ist unfrei und wir brauchen ein anderes.</align>
<align>Haben Freie-Software-Entwickler das Bewusstsein und die Entschlossenheit, ein breites Spektrum von freien Handbüchern zu schreiben?</align>
<align>Noch einmal hängt unsere Zukunft von Philosophie ab.</align>
<align>Wir müssen über Freiheit sprechen
Nach heutigen Schätzungen gibt es zehn Millionen Nutzer von GNU/Linux-Systemen wie Debian GNU/Linux und Red Hat „Linux“.</align>
<align>Freie Software hat solche praktische Vorteile entwickelt, dass Nutzer aus rein praktischen Erwägungen zuströmen.</align>
<align>Die guten Konsequenzen daraus sind offensichtlich: mehr Interesse an der Entwicklung freier Software, mehr Kunden für Geschäfte mit freier Software und mehr Möglichkeiten, Unternehmen zu ermutigen, kommerzielle freie Software anstelle proprietärer Softwareprodukte zu entwickeln.</align>
<align>Aber das Interesse an der Software wächst schneller als das Bewusstsein der Philosophie, auf der sie basiert, und das führt zu Problemen.</align>
<align>Unsere Möglichkeiten, den o. a. Herausforderungen und Bedrohungen zu entsprechen, hängt vom Willen ab, eine feste Haltung für Freiheit einzunehmen.</align>
<align>Um sicherzugehen, dass unsere Gemeinschaft diesen Willen hat, müssen wir den Gedanken an neue Nutzer verbreiten, wenn sie in die Gemeinschaft kommen.</align>
<align>Aber wir versagen dabei: die Bemühungen, neue Benutzer für unsere Gemeinschaft zu gewinnen, übersteigen bei weitem die Bemühungen, ihnen die Pflichten unserer Gemeinschaft zu lehren.</align>
<align>Wir müssen beides machen, und wir müssen beide Bemühungen im Gleichgewicht halten.</align>
<align>„Open Source“
Neuen Benutzern etwas über Freiheit zu lehren wurde 1998 schwieriger, als ein Teil der Gemeinschaft beschloss, nicht mehr den Begriff Freie Software zu verwenden, sondern stattdessen „Open-Source“-Software.</align>
<align>Einige, die diesen Begriff bevorzugten, hatten zum Ziel, die Verwechslung von frei mit gratis zu vermeiden ‑ ein zulässiges Ziel.</align>
<align>Andere hatten jedoch zum Ziel, den Geist des Prinzips ins Abseits zu drängen, der die Freie-Software-Bewegung und das GNU-Projekt motivierte, und stattdessen an Führungskräfte und Geschäftskunden zu appellieren, von denen viele eine Ideologie haben, die Gewinn über Freiheit, über Gemeinschaft und über Prinzipien stellt.</align>
<align>So konzentriert sich die Rhetorik von „Open Source“ auf das Potenzial, qualitativ hochwertige und leistungsfähige Software herzustellen, aber die Ideen von Freiheit, Gemeinschaft und Prinzip meidet.</align>
<align>Die „Linux“-Fachzeitschriften sind ein eindeutiges Beispiel dafür ‑ sie sind mit Werbung für proprietäre Software gefüllt, die mit GNU/Linux funktioniert.</align>
<align>Wenn das nächste Motif oder Qt erscheint, werden diese Magazine Programmierer warnen sich davon fernzuhalten oder werden sie dafür werben?</align>
<align>Die Unterstützung des Geschäfts kann in vielerlei Hinsicht zur Gemeinschaft beitragen; unter sonst gleichen Bedingungen ‚Ceteris Paribus‘ ist es nützlich.</align>
<align>Aber ihre Unterstützung zu gewinnen, indem man noch weniger über Freiheit und Prinzipien spricht, kann katastrophal sein; es macht das vorherige Ungleichgewicht zwischen sozialem Engagement und politischer Bildung noch schlimmer.</align>
<align>Freie Software und Open Source beschreiben mehr oder weniger die gleiche Softwarekategorie, aber sagen verschiedene Dinge über Software und Werte.</align>
<align>Das GNU-Projekt verwendet weiterhin den Begriff Freie Software um die Idee zum Ausdruck zu bringen, dass Freiheit, nicht nur Technik, wichtig ist.</align>
<align>Testen Sie!</align>
<align>Yodas Aphorismus (Es gibt kein Versuchen) klingt nett, aber funktioniert nicht für mich.</align>
<align>Ich habe die meisten meiner Aufgaben geleistet, während ich besorgt war, ob ich sie erledigen kann und unsicher war, ob es ausreichen würde um das Ziel zu erreichen.</align>
<align>Aber ich versuchte es trotzdem, denn es gab niemand außer mir zwischen dem Feind und meiner Stadt.</align>
<align>Selbst überrascht, ist es manchmal gelungen.</align>
<align>Manchmal habe ich versagt; einige meiner Städte sind gefallen.</align>
<align>Dann fand ich eine andere bedrohte Stadt und machte mich für eine andere Schlacht bereit.</align>
<align>Im Laufe der Zeit habe ich gelernt, nach Bedrohungen Ausschau zu halten und mich selbst zwischen sie und meine Stadt zu stellen, und rief andere Hacker auf, zu kommen und sich mir anzuschließen.</align>
<align>Heutzutage bin ich oft nicht der einzige.</align>
<align>Es ist eine Erleichterung und Freude, wenn ich sehe wie sich ein Regiment von Hackern eingräbt, um die Stellung zu halten, und weiß, diese Stadt kann überleben ‑ im Moment.</align>
<align>Aber die Gefahren werden jedes Jahr größer, und nun hat sich Microsoft klar gegen unsere Gemeinschaft ausgerichtet.</align>
<align>Wir können die zukünftige Freiheit nicht für selbstverständlich halten.</align>
<align>Halten Sie sie nicht für selbstverständlich!</align>
<align>Wenn Sie Ihre Freiheit behalten möchten, müssen Sie bereit sein sie zu verteidigen.</align>
<align>GNU-Manifest
Das nachstehende GNU-Manifest wurde von Richard Stallman 1985 geschrieben, um um Unterstützung bei der Entwicklung des Betriebssystems GNU zu bitten.</align>
<align>Ein Teil des Textes stammt aus der ursprünglichen Ankündigung von 1983 und wurde bis 1987 geringfügig angepasst, um neue Entwicklungen zu berücksichtigen; seither scheint es am besten, den Text unverändert zu belassen.</align>
<align>Seit dieser Zeit haben wir von einigen häufigen Missverständnissen erfahren, die durch eine andere Wortwahl hätten vermieden werden können.</align>
<align>Seit 1993 hinzugefügte Kommentare helfen diese Punkte zu klären.</align>
<align>Wenn Sie das GNU-System installieren möchten, empfehlen wir, dass Sie eines der 100%ig Freie-Software-Distributionen von GNU/Linux verwenden.</align>
<align>Weitere Informationen, wie man zu GNU beitragen kann, siehe http://www.gnu.org/help/.</align>
<align>Das GNU-Projekt ist Teil der Freie-Software-Bewegung, einer Kampagne für Freiheit für die Nutzer von Software.</align>
<align>Es handelt sich daher um einen Fehler, GNU mit dem Begriff „Open Source“ zu assoziieren ‑ dieser Begriff wurde bereits 1998 von Personen geprägt, die mit den ethischen Werten der Freie-Software-Bewegung nicht übereinstimmten.</align>
<align>Sie gebrauchten ihn, um einen unmoralischen Ansatz auf dem gleichen Gebiet zu fördern.</align>
<align>Was ist GNU?</align>
<align>Gnu ist Nicht Unix!</align>
<align>GNU, was für Gnu's Not Unix (‚Gnu ist Nicht Unix‘) steht, ist der Name für das vollständig unixoide Softwaresystem, das ich schreibe, um es frei an jedermann wegzugeben, der es nutzen kann.(1) Einige andere Freiwillige unterstützen mich.</align>
<align>Beiträge in Form von Zeit, Geld, Programmen und Ausstattung werden dringend benötigt.</align>
<align>Bis jetzt haben wir einen Emacs-Texteditor nebst Lisp zum Schreiben von Editorbefehlen, einen Quelltextdebugger, einen Yacc-kompatiblen Parsergenerator, einen Linker und etwa 35 Dienstprogramme.</align>
<align>Ein Kommandozeileninterpreter ist beinahe fertig.</align>
<align>Ein neuer portabler, optimierender C-Compiler hat sich aus seinem eigenen Quellcode kompiliert und kann dieses Jahr freigegeben werden.</align>
<align>Ein anfänglicher Systemkern existiert, es werden aber noch viele Funktionen benötigt, um Unix emulieren zu können.</align>
<align>Sobald Systemkern und Compiler fertiggestellt sind, wird es möglich sein, ein zur Programmentwicklung einsatzfähiges GNU-System zu verteilen.</align>
<align>Wir werden TeX als Textsatzsystem einsetzen, aber auch an Nroff wird gearbeitet.</align>
<align>Auch werden wir das freie, portable X Window System verwenden.</align>
<align>Danach werden wir ein portables Common Lisp hinzufügen, ein Empire-Spiel, eine Tabellenkalkulation und hunderte weiterer Dinge plus Online-Dokumentation.</align>
<align>Wir hoffen, schließlich alles Nützliche bereitstellen zu können, was normalerweise zu einem Unix-System gehört und vieles mehr.</align>
<align>GNU wird in der Lage sein Unix-Programme auszuführen, aber nicht mit Unix identisch sein.</align>
<align>Auf Grundlage unserer Erfahrungen mit anderen Betriebssystemen werden wir alle gebräuchlichen Verbesserungen vornehmen.</align>
<align>Insbesondere planen wir längere Dateinamen, Datei-Versionsnummern, ein absturzsicheres Dateisystem, eventuell Dateitypendungen, terminalunabhängige Anzeigeunterstützung und vielleicht irgendwann ein Lisp-basiertes Fenstersystem, durch welches mehrere Lisp- und gewöhnliche Unix-Programme sich einen Bildschirm teilen können.</align>
<align>Sowohl C und Lisp werden als Systemprogrammiersprachen verfügbar sein.</align>
<align>Für die Kommunikation beabsichtigen wir UUCP, MIT Chaosnet sowie Internetprotokolle zu unterstützen.</align>
<align>GNU richtet sich zunächst an Rechner der 68000/16000-Klasse mit virtuellem Speicher, weil es auf diesen am leichtesten lauffähig gemacht werden kann.</align>
<align>Den zusätzlichen Aufwand, es auf kleinere Rechner zu portieren, überlassen wir jemandem, der es auf diesen verwenden will.</align>
<align>Um fürchterliche Verwechselungen zu vermeiden, sprechen Sie bitte das g im Wort GNU mit aus, wenn es sich dabei um den Namen dieses Projekts handelt.</align>
<align>Warum ich GNU schreiben muss
Ich denke, die Goldene Regel verlangt, dass, wenn ich ein Programm mag, ich es mit Anderen gemeinsam nutzen muss, die es mögen.</align>
<align>Softwareanbieter hingegen wollen die Benutzer entzweien und unterwerfen, wobei sie jeden Anwender dazu verpflichten, nicht mit anderen zu teilen.</align>
<align>Ich weigere mich, die Solidarität mit anderen Nutzern auf diese Weise zu brechen.</align>
<align>Ich kann nicht guten Gewissens eine Vertraulichkeits- oder Softwarelizenzvereinbarung unterzeichnen.</align>
<align>Jahrelang arbeitete ich im Labor für künstliche Intelligenz (KI-Labor) des MIT, um solchen Tendenzen und nicht vorhandenen Gastfreundlichkeiten zu widerstehen, aber letzten Endes waren sie zu weit gegangen: Ich konnte nicht in einer Institution bleiben, in der solche Dinge gegen meinen Willen geschehen.</align>
<align>Damit ich weiterhin Rechner ohne Schmach benutzen kann, habe ich beschlossen, eine genügend große Sammlung von freier Software zusammenzustellen, so dass ich in der Lage sein werde, ohne jegliche unfreie Software auszukommen.</align>
<align>Ich habe beim KI-Labor gekündigt, um dem MIT keinen rechtlichen Vorwand zu bieten, mich daran zu hindern, GNU zu verschenken.(2)</align>
<align>Warum wird GNU mit Unix kompatibel sein
Unix ist nicht mein ideales System, aber es ist nicht so übel.</align>
<align>Die wesentlichen Eigenschaften von Unix scheinen gute zu sein, und ich denke, dass ich fehlendes ergänzen kann, ohne die guten Eigenschaften zu verderben.</align>
<align>Und ein mit Unix kompatibles System wäre für viele Menschen angenehm zu übernehmen.</align>
<align>Wie GNU erhältlich sein wird
GNU ist nicht in der Public Domain.</align>
<align>Jedermanm wird erlaubt sein, GNU zu modifizieren und weiterzugeben, aber keinem Distributor wird erlaubt sein, die Weitergabe zu beschränken.</align>
<align>D. h. proprietäre Modifikationen werden nicht erlaubt sein.</align>
<align>Ich möchte damit sicherstellen, dass alle Varianten von GNU frei bleiben.</align>
<align>Warum viele andere Programmierer mithelfen wollen
Ich habe viele andere Programmierer gefunden, die von GNU begeistert sind und helfen wollen.</align>
<align>Viele Programmierer sind mit der Kommerzialisierung von Systemsoftware unzufrieden.</align>
<align>Es mag ihnen die Möglichkeit geben, mehr Geld zu verdienen, aber es zwingt sie gleichzeitig, andere Programmierer im allgemeinen als Gegner anstatt als Kameraden zu betrachten.</align>
<align>Der fundamentale Akt der Freundschaft zwischen Programmierern ist das Teilen von Programmen; derzeitige Vermarktungspraktiken verbieten Programmierern im wesentlichen, sich gegenseitig als Freunde zu behandeln.</align>
<align>Der Käufer von Software hat die Wahl zwischen Freundschaft und Gesetzestreue.</align>
<align>Naturgemäß entscheiden viele, dass Freundschaft für sie wichtiger ist, aber diejenigen, welche an das Gesetz glauben, haben eine schwere Entscheidung.</align>
<align>Sie werden zynisch und betrachten Programmierung nur noch als eine Möglichkeit, Geld zu verdienen.</align>
<align>Durch die Arbeit an und mit GNU anstelle von proprietären Programmen, können wir gleichzeitig zu jedem gastfreundlich sein und das Gesetz befolgen.</align>
<align>Außerdem dient GNU als inspirierendes Beispiel und Transparent, andere zu versammeln, um sich uns beim Teilen anzuschließen.</align>
<align>Dies vermittelt uns ein Gefühl der Harmonie, das bei Nutzung unfreier Software unmöglich wäre.</align>
<align>Für rund die Hälfte der Programmierer, mit denen ich sprach, ist dies ein entscheidendes Glücksgefühl, das durch Geld nicht ersetzt werden kann.</align>
<align>Wie Sie beitragen können
(Um an aktuellen Softwareaufgaben mitzuarbeiten, siehe Projekte hoher Priorität und GNU-Projekte, die Hilfe suchen, der allgemeinen Aufgabenliste für GNU-Software.</align>
<align>Für weitere Möglichkeiten der Hilfe siehe Ein Leitfaden zur Unterstützung des Betriebssystems GNU.)</align>
<align>Ich bitte Rechnerhersteller um Rechner- und Geldspenden.</align>
<align>Einzelpersonen bitte ich um Spenden in Form von Programmen und Mitwirkung.</align>
<align>Wenn Sie uns einen Rechner zur Verfügung stellen, können Sie damit rechnen, dass GNU relativ früh darauf laufen wird.</align>
<align>Die Rechner sollten komplette, gebrauchsfertige Systeme sein, in einer Wohnung benutzt werden können und keine außergewöhnliche Kühlung oder Stromversorgung benötigen.</align>
<align>Ich habe sehr viele Programmierer gefunden, die bereitwillig in Teilzeit zu GNU beitragen.</align>
<align>Für die meisten Projekte dürfte eine solche teilzeitlich verteilte Arbeit schwierig zu koordinieren sein; die unabhängig geschriebenen Teile würden nicht zusammenarbeiten.</align>
<align>Aber für diese besondere Aufgabe, Unix zu ersetzen, ist dieses Problem nicht vorhanden.</align>
<align>Ein komplettes Unix-System enthält hunderte von Dienstprogrammen, von denen jedes separat dokumentiert ist.</align>
<align>Die meisten Schnittstellenspezifikationen werden durch Unix-Kompatibilität geregelt.</align>
<align>Wenn jeder Mitwirkende einen kompatiblen Ersatz für ein einzelnes Unix-Dienstprogramm schreiben kann und dafür sorgt, dass es anstelle des Originals auf einem Unix-System funktioniert, werden diese Dienstprogramme direkt zusammenarbeiten.</align>
<align>Selbst wenn wir Murphy erlauben, ein paar unerwartete Probleme zu schaffen, sollte das Zusammensetzen dieser Komponenten eine durchführbare Aufgabe sein (der Systemkern erfordert eine genauere Kommunikation und wird von einer kleinen, festen Gruppe bearbeitet).</align>
<align>Sollte ich Geldspenden erhalten, werden mich diese in die Lage versetzen, ein paar Personen in Voll- oder Teilzeitarbeit einzustellen.</align>
<align>Die Gehälter werden nicht dem Standard von Programmierern entsprechen, aber ich suche Personen, für die das Bilden von Gemeinschaftsgeist wichtiger ist als Geld zu verdienen.</align>
<align>Ich betrachte dies als einen Weg, engagierten Menschen zu ermöglichen, ihre gesamte Energie der Arbeit an GNU zu widmen, indem ich sie von der Notwendigkeit freimache, ihren Lebensunterhalt auf andere Weise zu verdienen.</align>
<align>Warum alle Rechnerbenutzer profitieren
Sobald GNU geschrieben ist, wird jedermann in der Lage sein, gute Systemsoftware frei zu erhalten, so wie Luft.(3)</align>
<align>Dies bedeutet mehr, als nur jedem den Preis für eine Unix-Lizenz einzusparen.</align>
<align>Es bedeutet, dass viel unnötige Doppelarbeit an System-Programmieraufwand vermieden werden kann.</align>
<align>Diese Anstrengungen können stattdessen eingesetzt werden, um den Stand der Technik voranzubringen.</align>
<align>Der komplette Quelltext des Systems wird für jedermann verfügbar sein.</align>
<align>Als Ergebnis wird jeder Benutzer, der Änderungen im System machen muss die Freiheit haben, diese selbst vorzunehmen, oder einen Programmierer oder eine Firma damit beauftragt.</align>
<align>Die Benutzer werden nicht länger von der Gnade einzelner Programmierer oder Unternehmen abhängig sein, welche den Quelltext besitzen und daher als einzige Änderungen vornehmen können.</align>
<align>Schulen können ein viel besseres pädagogisches Umfeld bieten, wenn sie die Schüler dazu anhalten, den Code des Betriebssystems zu untersuchen und zu verbessern.</align>
<align>Harvards Rechnerraum verlangte eine Richtlinie, dass kein Programm im System installiert werden durfte, dessen Quelltext nicht öffentlich zugänglich war ‑ und hielten dies aufrecht, indem bestimmte Programme tatsächlich nicht installiert wurden.</align>
<align>Ich war sehr begeistert.</align>
<align>Und schließlich wird auch der Verwaltungsaufwand vermieden, zu überlegen, wem die Systemsoftware gehört und was man damit tun darf und was nicht.</align>
<align>Durch Vorkehrungen, um Menschen für die Nutzung eines Programms, einschließlich der Lizenzierung von Kopien, zahlen zu lassen, entstehen immer gewaltige Kosten für die Gesellschaft durch den schwerfälligen Mechanismus notwendig, um herauszufinden für wie viel (d. h. für welche Programme) eine Person zahlen muss.</align>
<align>Und nur ein Polizeistaat kann jeden dazu zwingen, sie zu befolgen.</align>
<align>Stellen Sie sich eine Raumstation vor, wo die Luft mit großem Aufwand hergestellt werden muss: Es mag fair sein, Atemluft pro verbrauchten Liter zu berechnen, aber die gebührenpflichtige Gasmaske, den ganzen Tag und die ganze Nacht tragend, ist unerträglich, selbst wenn für jeden die Berechnung der Luft erschwinglich ist.</align>
<align>Und allgegenwärtige Fernsehkameras, die überwachen, ob jemand die Maske abnimmt, sind ungeheuerlich.</align>
<align>Es ist besser, die Luftanlage mit einer Pro-Kopf-Steuer zu finanzieren und die Masken wegzuwerfen.</align>
<align>Das Kopieren eines Programms oder Teile davon ist für einen Programmierer ebenso selbstverständlich wie das Atmen, und genauso nutzbringend.</align>
<align>Es sollte genauso frei sein.</align>
<align>Einige leicht zu entkräftende Einwände gegen die Ziele von GNU
Niemand wird es benutzen, wenn es umsonst ist, weil das bedeutet, sich nicht auf Unterstützung verlassen zu können.</align>
<align>Man muss etwas für das Programm berechnen, um Unterstützung anbieten zu können.</align>
<align>Wenn man für GNU mit Dienstleistung eher bezahlen würde als GNU ohne Dienstleistung umsonst zu erhalten, sollte ein Unternehmen, dass diese Dienstleistung speziell für Personen anbietet, die GNU umsonst erhalten haben, profitabel sein.(4)</align>
<align>Wir müssen zwischen Unterstützung in Form von echter Programmierarbeit und Händchenhalten unterscheiden.</align>
<align>Ersteres ist etwas, das man nicht von einem Softwarehändler erwarten kann.</align>
<align>Wenn Ihr Problem nicht von genügend Personen geteilt wird, wird der Händler Ihnen sagen, Sie hätten sich verlaufen.</align>
<align>Wenn Ihr Unternehmen darauf angewiesen ist, sich auf Unterstützung zu verlassen, ist der einzige Weg, alle notwendigen Quelltexte und Werkzeuge vorliegen zu haben.</align>
<align>Dann können Sie jede verfügbare Person beauftragen, Ihr Problem zu lösen; Sie sind nicht Einzelnen ausgeliefert.</align>
<align>Mit Unix ist dies infolge des hohen Preises der Quelltexte für die meisten Unternehmen unerschwinglich.</align>
<align>Mit GNU wird dies leicht sein.</align>
<align>Es ist zwar immer noch möglich, dass keine kompetente Person zur Verfügung steht, aber dies Problem liegt dann nicht an den Vertriebsbedingungen.</align>
<align>GNU beseitigt nicht alle Probleme der Welt, sondern nur bestimmte.</align>
<align>Gleichzeitig sind Anwender ohne Rechnerwissen auf Hilfe angewiesen: Dinge erledigen, die sie leicht selbst tun könnten, aber nicht wissen, wie.</align>
<align>Solche Dienstleistungen können von Unternehmen angeboten werden, die gerade solche Benutzerhilfen und Reparaturdienste anbieten.</align>
<align>Wenn es stimmt, dass Benutzer es vorziehen für ein Produkt mit Dienstleistung zu bezahlen, werden sie auch bereit sein die Dienstleistung zu bezahlen, wenn sie das Produkt umsonst erhalten haben.</align>
<align>Die Dienstleistungsunternehmen werden in Qualität und Preis miteinander konkurrieren; Benutzer nicht an ein bestimmtes gebunden sein.</align>
<align>In der Zwischenzeit sollten diejenigen von uns, die die Dienstleistung nicht benötigen, in der Lage sein, das Programm zu benutzen, ohne die Dienstleistung bezahlen zu müssen.</align>
<align>Ohne Werbung kann man nicht viele Menschen erreichen, und man muss etwas für das Programm berechnen, um dies zu ermöglichen.</align>
<align>Es bringt nichts Werbung für ein Programm zu machen, was man umsonst bekommen kann.</align>
<align>Es gibt viele Formen kostenloser oder kostengünstiger Werbung, die dazu dienen kann, viele Rechnerbenutzer über so etwas wie GNU zu informieren.</align>
<align>Es mag stimmen, dass man mehr Benutzer von Kleinrechnern durch Werbung erreichen kann.</align>
<align>Wenn dies wirklich so ist, sollte ein Unternehmen, das für die Dienstleistung wirbt, GNU gegen eine Gebühr zu kopieren und zu versenden, erfolgreich genug sein, um damit seine Werbung und mehr zu bezahlen.</align>
<align>Auf diese Weise bezahlen nur die Nutzer, die von der Werbung profitieren.</align>
<align>Wenn andererseits viele Personen GNU von ihren Freunden erhalten und solche Unternehmen keinen Erfolg haben, zeigt dies, dass Werbung in Wirklichkeit gar nicht nötig war, um GNU zu verbreiten.</align>
<align>Warum wollen die Befürworter der freien Marktwirtschaft nicht den freien Markt darüber entscheiden lassen?(5)</align>
<align>Mein Unternehmen benötigt ein proprietäres Betriebssystem, um einen Wettbewerbsvorteil zu bekommen.</align>
<align>GNU wird keine Betriebssystemsoftware aus dem Wettbewerb entfernen.</align>
<align>Sie werden keinen Vorteil auf diesem Gebiet erzielen können, aber umgekehrt wird auch Ihre Konkurrenz Sie nicht übervorteilen können.</align>
<align>Sie werden auf anderen Gebieten in Wettbewerb treten, während Sie auf diesem Gebiet voneinander profitieren werden.</align>
<align>Wenn Ihr Unternehmen vom Verkauf eines Betriebssystems lebt, werden Sie GNU nicht mögen, aber das ist Ihr Problem.</align>
<align>Wenn Ihr Unternehmen anders ist, kann GNU Sie davor bewahren, in das teure Geschäft gedrängt zu werden, Betriebssysteme zu verkaufen.</align>
<align>Ich würde es gerne sehen, wenn viele Hersteller und Benutzer die Entwicklung von GNU durch Spenden unterstützen würden, um die Kosten für jeden einzelnen zu senken.(6)</align>
<align>Verdienen Programmierer nicht eine Belohnung für ihre Kreativität?</align>
<align>Wenn irgendetwas eine Belohnung verdient, ist es sozialer Beitrag.</align>
<align>Kreativität kann ein sozialer Beitrag sein, aber nur, wenn die Gesellschaft die Freiheit hat, die Resultate zu nutzen.</align>
<align>Wenn Programmierer eine Belohnung für das Schreiben innovativer Programme verdienen, müssten sie aus demselben Grunde bestraft werden, wenn sie die Nutzung dieser Programme einschränken.</align>
<align>Sollte ein Programmierer nicht eine Belohnung für seine Kreativität verlangen dürfen?</align>
<align>Es ist nichts Schlechtes daran für Arbeit bezahlt zu werden oder sein Einkommen maximieren zu wollen, solange man nicht destruktiv wird.</align>
<align>Die zur Zeit auf diesem Gebiet gebräuchlichen Mittel basieren auf einer Form von Zerstörung.</align>
<align>Geld von Benutzern zu kassieren, indem man den Gebrauch eines Programms einschränkt, ist destruktiv, weil die Beschränkungen die Häufigkeit und die Wege reduziert, in denen das Programm genutzt werden könnte.</align>
<align>Dies reduziert den Reichtum, den die Menschheit aus dem Programm leitet.</align>
<align>Ist die Beschränkung eine bewusste Entscheidung, sind die schädlichen Auswirkungen absichtliche Zerstörung.</align>
<align>Der Grund, weshalb ein guter Bürger keine solche destruktiven Mittel anwendet um reicher zu werden ist, dass, wenn dies jeder täte, wir alle durch die gegenseitige Destruktivität ärmer würden.</align>
<align>Dies ist die Kantische Ethik, oder die Goldene Regel.</align>
<align>Da mir die enstehenden Konsequenzen, wenn jeder Information hortet, nicht gefallen, bin ich verpflichtet es für falsch zu betrachten, wenn sich einer so verhält.</align>
<align>Insbesondere der Wunsch für die eigene Kreativität belohnt zu werden, rechtfertigt nicht die Welt im allgemeinen von allen oder einem Teil dieser Kreativität zu berauben.</align>
<align>Werden Programmierer nicht verhungern?</align>
<align>Ich könnte antworten, dass niemand gezwungen ist, ein Programmierer zu sein.</align>
<align>Die meisten von uns könnten nicht davon leben auf der Straße zu stehen und Grimassen zu schneiden.</align>
<align>Aber wir sind deswegen noch lange nicht dazu verurteilt, unser Leben stehend auf der Straße zu verbringen, Grimassen schneidend und verhungernd.</align>
<align>Wir tun etwas anderes.</align>
<align>Aber das ist die falsche Antwort, weil sie die implizite Annahme des Fragestellers akzeptiert: dass Programmierern ohne Eigentum an Software möglicherweise kein Cent bezahlt werden würde.</align>
<align>Vermeintlich Alles oder Nichts.</align>
<align>Der wahre Grund, warum Programmierer nicht verhungern werden ist, dass es für sie immer noch möglich sein wird, für Programmierung bezahlt zu werden; nur halt nicht ganz so viel wie jetzt.</align>
<align>Eingeschränktes Kopieren ist nicht die einzige Grundlage für geschäftliche Software.</align>
<align>Es ist die üblichste Basis(7), weil sie am meisten Geld einbringt.</align>
<align>Wäre sie verboten oder durch Kunden abgelehnt, würde sich das Softwaregeschäft auf andere organisatorische Grundlagen bewegen, die zur Zeit weniger häufig verwendet werden.</align>
<align>Es gibt immer viele Möglichkeiten, Geschäfte zu organisieren.</align>
<align>Vermutlich wird das Programmieren auf dieser neuen Grundlage nicht so lukrativ sein, wie es jetzt ist.</align>
<align>Aber das ist kein Argument gegen die Änderung.</align>
<align>Man betrachtet es im allgemeinen nicht als ungerecht, dass VerkäuferInnen die Gehälter bekommen, die sie bekommen.</align>
<align>Würden Programmierer die gleichen Gehälter beziehen, wäre dies ebenfalls nicht ungerecht.</align>
<align>(In der Praxis würden sie auch weiterhin deutlich mehr beziehen.)</align>
<align>Haben Menschen nicht das Recht zu kontrollieren, wie ihre Ideen verwendet werden?</align>
<align>Die Kontrolle über die Verwendung eigener Ideen konstituiert in Wirklichkeit die Kontrolle über das Leben anderer Menschen, und wird i. d. R. eingesetzt, um den Menschen das Leben zu erschweren.</align>
<align>Personen, die die Frage der Rechte am geistigen Eigentum(8) aufmerksam untersucht haben (z. B. Anwälte) sagen, dass es kein intrinsisches Recht auf geistiges Eigentum gibt.</align>
<align>Die von der Regierung anerkannten Arten angeblicher Rechte am geistigen Eigentum wurden durch besondere Rechtsvorschriften für bestimmte Zwecke geschaffen.</align>
<align>Beispielsweise wurde das Patentsystem etabliert, um Erfinder zu ermutigen, die Details ihrer Erfindungen offen zu legen.</align>
<align>Der Zweck war die Gesellschaft und nicht den Erfindern zu helfen.</align>
<align>Zu jener Zeit war die Lebensdauer von 17 Jahren für ein Patent kurz verglichen mit der Geschwindigkeit des Fortschritts.</align>
<align>Da Patente nur für Hersteller ein Thema sind, für die die Kosten und Aufwand eines Lizenzvertrages verglichen mit den Produktionskosten gering sind, schaden Patente oft nicht viel.</align>
<align>Sie behindern die meisten Einzelpersonen, die patentierte Produkte benutzen, nicht.</align>
<align>Die Idee des Urheberrechts existierte früher nicht, als Autoren häufig andere Autoren in nicht-fiktionalen Werken kopierten.</align>
<align>Diese Praxis war nützlich und der einzige Weg, Werke vieler Autoren haben sogar teilweise überlebt.</align>
<align>Das Copyright-System wurde speziell zur Förderung der Urheberschaft erstellt.</align>
<align>Auf dem Gebiet, für das es erfunden wurde – Bücher, die nur auf einer Druckerpresse ökonomisch vervielfältigt werden konnten ‑ schadete es wenig, und behindert dadurch die meisten Leser nicht.</align>
<align>Alle geistigen Eigentumsrechte sind nur von der Gesellschaft, zu Recht oder Unrecht, gewährte Lizenzen, weil sie glaubte, sie würde als Ganzes profitieren.</align>
<align>In einer bestimmten Situation jedoch müssen wir uns fragen: Sind wir wirklich durch die Gewährung solcher Lizenzen besser gestellt?</align>
<align>Welche Art der Handlung erlauben wir einer Person dadurch zu tun?</align>
<align>Der Fall von Programmen heute unterscheidet sich sehr von Büchern von vor hundert Jahren.</align>
<align>Die Tatsache, dass der einfachste Weg, ein Programm zu kopieren, von einem Mitmenschen zum Nächsten ist, die Tatsache, dass ein Programm unterschiedlichen sowohl Quell- als auch Objektcode enthält und die Tatsache, dass ein Programm verwendet statt gelesen und genossen wird, bündeln sich, um eine Situation zu schaffen, in der eine Person, die ein Urheberrecht einfordert, der Gesellschaft als Ganzes sowohl materiell als auch spirituell schadet; eine Situation, in der eine Person kein Urheberrecht einfordern sollte, unabhängig davon, ob es das Recht ermöglicht.</align>
<align>Wettbewerb bringt Dinge dazu, besser gemacht zu werden.</align>
<align>Das Paradigma von Wettbewerb ist ein Wettrennen: indem wir den Sieger belohnen, ermuntern wir jeden dazu, schneller zu laufen.</align>
<align>Wenn Kapitalismus tatsächlich auf diese Weise funktioniert, ist es ein guter Job; aber seine Verteidiger haben Unrecht mit der Annahme, es funktioniere immer so.</align>
<align>Wenn die Läufer vergessen, weshalb der Preis ausgesetzt wurde und unbedingt, egal wie, gewinnen wollen, entdecken sie vielleicht andere Strategien ‑ wie z. B. andere Läufer anzugreifen.</align>
<align>Wenn die Läufer in einen Faustkampf geraten, werden sie alle den Lauf später beenden.</align>
<align>Proprietäre und geheime Software sind das moralische Äquivalent zu Läufern in einem Faustkampf.</align>
<align>Traurig zu sagen, dass der einzige vorhandene Schiedsrichter, den wir bekommen haben, nichts gegen die Faustkämpfe einzuwenden hat; er reguliert sie lediglich („Pro gelaufene zehn Meter darf man einen Schuss abfeuern“).</align>
<align>Er sollte sie stattdessen auseinanderbringen und Läufer bereits für den Versuch eines Angriffs bestrafen.</align>
<align>Wird ohne finanziellen Ansporn nicht jeder aufhören zu programmieren?</align>
<align>Tatsächlich werden viele Menschen absolut ohne jeden finanziellen Ansporn programmieren.</align>
<align>Programmierung übt eine unwiderstehliche Anziehungskraft auf einige Menschen aus, in der Regel Menschen, die darin am besten sind.</align>
<align>Es gibt keinen Mangel an professionellen Musikern, die am Ball bleiben, obwohl sie keine Hoffnung, haben ihren Lebensunterhalt zu bestreiten.</align>
<align>Aber tatsächlich ist diese Frage, obwohl häufig gestellt, der Situation nicht angemessen.</align>
<align>Die Bezahlung für Programmierer wird nicht verschwinden, nur weniger werden.</align>
<align>Die richtige Frage ist also, ob jemand mit einem reduzierten finanziellen Ansporn programmieren wird?</align>
<align>Meine Erfahrung zeigt, dass sie werden.</align>
<align>Seit mehr als zehn Jahren haben viele der weltweit besten Programmierer im KI-Labor für weit weniger Geld gearbeitet, als sie anderswo hätten verdienen können.</align>
<align>Sie erhielten nicht-finanzielle Belohnungen: Ruhm und Anerkennung, zum Beispiel.</align>
<align>Und Kreativität ist auch Spaß, eine Belohnung in sich.</align>
<align>Dann gingen die meisten von ihnen, als sich eine Chance bot, dieselbe interessante Arbeit für viel Geld zu tun.</align>
<align>Die Tatsachen zeigen, dass Menschen aus anderen Gründen als Reichtum programmieren; aber wenn sich ihnen eine Chance bietet, mehr Geld zu verdienen, werden sie es zu Recht erwarten und auch einfordern.</align>
<align>Niedrig zahlende Unternehmen sehen schlecht im Wettbewerb mit hoch zahlenden aus, müssen sich aber nicht schlecht machen, wenn hoch zahlende untersagt sind.</align>
<align>Wir benötigen die Programmierer unbedingt.</align>
<align>Wenn sie möchten, dass wir aufhören unseren Mitmenschen zu helfen, müssen wir folgen.</align>
<align>Sie können niemals so verzweifelt sein, dass Sie derartigen Forderungen nachgeben müssen.</align>
<align>Vergessen Sie nicht: Millionen für die Verteidigung, aber nicht einen Cent für Anerkennung!</align>
<align>Programmierer müssen von irgendetwas leben.</align>
<align>Kurzfristig ist das wahr.</align>
<align>Es gibt jedoch viele Möglichkeiten, mit denen Programmierer Ihren Lebensunterhalt verdienen können, ohne den Verkauf von Programmrechten zu nutzen.</align>
<align>Dieser Weg ist jetzt üblich, weil er Programmierern und Geschäftsleuten das meiste Geld einbringt und nicht, weil es der einzige Weg ist, seinen Lebensunterhalt zu verdienen.</align>
<align>Es ist leicht, andere Wege zu finden, wenn man sie finden möchte.</align>
<align>Hier sind einige Beispiele.</align>
<align>Ein Rechnerhersteller, der einen neuen Rechner einführt, zahlt für die Portierung des Betriebssystems auf die neue Hardware.</align>
<align>Programmierer können auch in der Schulung, der Benutzerhilfe und der Wartung beschäftigt werden.</align>
<align>Menschen mit neuen Ideen können Programme als Freeware(9) verbreiten, zufriedene Benutzer um Spenden bitten oder Dienstleistungen rentabel anbieten.</align>
<align>Ich bin einigen Personen begegnet, die bereits erfolgreich auf diese Weise arbeiten.</align>
<align>Benutzer mit ähnlichen Bedürfnissen können Benutzergruppen bilden und Beiträge zahlen.</align>
<align>Die Gruppe würde dann Programmierfirmen damit beauftragen, Programme zu schreiben, die die Mitglieder verwenden möchten.</align>
<align>Alle Arten der Entwicklung können mit einer Softwaresteuer finanziert werden:</align>
<align>Angenommen, jeder, der einen Rechner kauft, muss x Prozent des Preises als Softwaresteuer entrichten.</align>
<align>Die Regierung gibt dieses Geld einer Agentur wie der National Science Foundation (NSF), um es für die Softwareentwicklung einzusetzen.</align>
<align>Wenn aber der Rechnerkäufer selbst für die Softwareentwicklung spendet, wird die Spende mit der Softwaresteuer verrechnet.</align>
<align>Er kann für das Projekt seiner Wahl spenden ‑ häufig gewählt in der Hoffnung, die fertigen Ergebnisse verwenden zu können.</align>
<align>Er kann eine Gutschrift für jeden Spendenbeitrag bis zur gesamten Steuerschuld, die er zu zahlen hatte, anrechnen lassen.</align>
<align>Der gesamte Steuersatz könnte durch ein Votum der Steuerzahler beschlossen werden, entsprechend dem auf sie zu besteuernden Betrag.</align>
<align>Die Konsequenzen:</align>
<align>Die rechnernutzende Gemeinschaft unterstützt die Softwareentwicklung.</align>
<align>Diese Gemeinschaft entscheidet, welches Niveau der Unterstützung erforderlich ist.</align>
<align>Benutzer, denen es darauf ankommt, an welchen Projekten sie sich beteiligen, können dies selbst entscheiden.</align>
<align>Auf lange Sicht sind freie Programme ein Schritt in Richtung einer Welt ohne Mangel, in der niemand hart arbeiten muss, um den Lebensunterhalt zu verdienen.</align>
<align>Die Menschen werden frei sein sich selbst Aktivitäten zu widmen, die Freude machen, wie der Programmierung, nach den geforderten zehn Wochenstunden notwendiger Aufgaben, wie beispielsweise Verwaltung, Familienberatung, Roboterreparatur und Asteroidenprospektierung.</align>
<align>Es wird keine Notwendigkeit geben, von Programmierung zu leben.</align>
<align>Wir haben bereits die Menge an Arbeit, welche die Gesellschaft für ihre Produktivität aufbringen muss, gewaltig reduzieren können, aber nur ein kleiner Teil davon übertrug sich in mehr Freizeit für Arbeitnehmer, weil jede produktive Aktivität zwangsläufig von viel unproduktiver Aktivität begleitet wird.</align>
<align>Die Hauptursachen dafür sind Bürokratie und gegenseitige Kämpfe gegen die Konkurrenz.</align>
<align>Freie Software wird diese Auswüchse auf dem Gebiet der Softwareentwicklung stark reduzieren.</align>
<align>Wir müssen so handeln, um technische Fortschritte in Sachen Produktivität zu erzielen, die sich in weniger Arbeit für uns alle äußern werden.</align>
<align>Fußnoten
↗ Diese Wortwahl war ein wenig sorglos.</align>
<align>Die Absicht war, dass niemand für die Erlaubnis zahlen muss, das GNU-System zu benutzen.</align>
<align>Dieses geht jedoch nicht aus der Formulierung hervor und man interpretiert dies häufig mit den Worten, dass Kopien von GNU stets ohne oder höchstens gegen geringes Entgelt verbreitet werden sollen.</align>
<align>Dies war nie die Absicht; weiter unten erwähnt das Manifest die Möglichkeit der Erbringung von Vertriebsdienstleistungen für Unternehmen zur Gewinnerzielung.</align>
<align>Anschließend habe ich gelernt, sorgfältig zwischen frei im Sinne von Freiheit und frei im Sinne von Preis zu unterscheiden.</align>
<align>Freie Software ist Software, deren Benutzer die Freiheit haben, sie weiterzugeben und zu ändern.</align>
<align>Einige werden ihre Kopien kostenlos erhalten, andere dafür bezahlen ‑ und wenn diese Gelder dazu beitragen, die Software weiter zu verbessern, um so besser.</align>
<align>Wichtig ist, dass jedermann, der eine Kopie besitzt, auch die Freiheit beim Gebrauch dieser Kopie mit anderen zu kooperieren hat.</align>
<align>↗ Der Ausdruck verschenken ist ein weiteres Indiz dafür, dass ich noch nicht eindeutig die Frage von Preis und Freiheit getrennt hatte.</align>
<align>Wir empfehlen nun dieser Ausdruck zu vermeiden, wenn es um Freie Software geht.</align>
<align>Siehe Zu vermeidende Wörter für weitere Informationen.</align>
<align>↗ Dies ist eine weitere Stelle, an der ich versäumte, sorgfältig zwischen den beiden verschiedenen Bedeutungen von frei zu unterscheiden.</align>
<align>Die Aussage ist so nicht falsch ‑ man kann Kopien von GNU-Software kostenlos von Freunden oder über das Internet erhalten.</align>
<align>Aber es lässt auf die falsche Idee schließen.</align>
<align>↗ Inzwischen gibt es mehrere solcher Unternehmen.</align>
<align>↗ Obwohl es sich um eine wohltätige Einrichtung und nicht um ein Unternehmen handelt, hat die Free Software Foundation seit 10 Jahren den grössten Teil ihres Kapitals aus der Vertriebsdienstleistung eingenommen.</align>
<align>Sie können Artikel von der FSF bestellen, um ihre Arbeit zu unterstützen.</align>
<align>↗ Eine Gruppe von Rechnerfirmen hat um 1991 Kapital angesammelt, um die Wartung des GNU C-Compilers zu unterstützen.</align>
<align>↗ Ich glaube, ich irrte mich zu sagen, dass proprietäre Software der häufigste Grund ist, um mit Software Geld zu verdienen.</align>
<align>Es scheint, dass es tatsächlich das häufigste Geschäftsmodell wurde und die Entwicklung von benutzerdefinierter Software ist.</align>
<align>Das bietet nicht die Möglichkeit Mieten einzunehmen, also muss das Unternehmen weiterhin die eigentliche Arbeit erledigen, um ständig Einnahmen zu haben.</align>
<align>Das benutzerdefinierte Softwaregeschäft wird weiterhin, mehr oder weniger unverändert, in einer Freie-Software-Welt der freien Software existieren.</align>
<align>Deshalb erwarte ich nicht, dass die meisten bezahlten Programmierer weniger in einer Welt der freien Software verdienen würden.</align>
<align>↗ In den 1980ern hatte ich noch nicht erkannt wie verwirrend es war von dem Problem bezüglich „Geistiges Eigentum“ zu sprechen.</align>
<align>Dieser Begriff ist offensichtlich voreingenommen; subtiler ist die Tatsache, dass er verschiedene unterschiedliche Gesetze in einen Topf wirft, die sehr unterschiedliche Probleme aufwerfen.</align>
<align>Heutzutage halte ich dazu an, den Begriff „Geistiges Eigentum“ völlig abzulehnen, damit es andere nicht zu der Annahme führt, dass diese Gesetze ein schlüssiges Problem lösen.</align>
<align>Um dies eindeutig zu trennen, werden Patente, Urheberrechte und Warenzeichen gesondert erörtert. Siehe „Sagten Sie ‚Geistiges Eigentum‘?</align>
<align>Eine verführerische Illusion“, wie dieser Begriff Verwechslungsgefahr und Voreingenommenheit verbreitet.</align>
<align>↗ Anschließend lernten wir zwischen Freie Software und Freeware zu unterscheiden.</align>
<align>Der Begriff Freeware bezeichnet Software, die Sie frei weitergegeben können, aber in der Regel den Quellcode nicht frei untersuchen und ändern dürfen, daher größtenteils unfreie Software ist.</align>
<align>Siehe Zu vermeidende Wörter für weitere Informationen.</align>
<align>Warum Freie Software freie Dokumentation braucht
Abonnieren Sie unsere Mailingliste über die Gefahren von elektronischen Büchern.</align>
<align>GNU Free Documentation License (FDL)
Der größte Mangel bei freien Betriebssystemen ist nicht die Software ‑ es ist der Mangel an guten freien Handbüchern, die wir in diese Systeme integrieren können.</align>
<align>Viele unserer wichtigsten Programme liegen nicht mit vollständigen Handbüchern vor.</align>
<align>Dokumentation ist ein wesentlicher Teil jedes Softwarepakets; wenn ein wichtiges freies Softwarepaket nicht mit einem freien Handbuch vorliegt, ist das eine gravierende Lücke.</align>
<align>Wir haben heute viele solcher Lücken.</align>
<align>Einst dachte ich, schon vor vielen Jahren, ich würde Perl erlernen.</align>
<align>Ich besorgte mir ein Exemplar eines freien Handbuchs, aber fand es schwer zu lesen.</align>
<align>Als ich Nutzer von Perl nach Alternativen fragte, erklärten sie mir, dass es bessere einführende Handbücher gäbe ‑ aber die waren nicht frei.</align>
<align>Warum war das so?</align>
<align>Die Autoren der guten Handbücher hatten sie für den O'Reilly-Verlag geschrieben, der sie mit restriktiven Bedingungen veröffentlichte ‑ kein Kopieren, kein Modifizieren, Quellcode-Dateien nicht verfügbar ‑ damit waren sie von der Freie-Software-Gemeinschaft ausgeschlossen.</align>
<align>Das war nicht das erste Mal, dass so etwas geschehen ist, und (zum großen Schaden unserer Gemeinschaft) bei weitem nicht das letzte Mal.</align>
<align>Verleger proprietärer Handbücher haben seitdem noch viele Autoren dazu verleitet, ihre Handbücher zu beschränken.</align>
<align>Viele Male habe ich einen GNU-Nutzer eifrig von einem Handbuch erzählen hören, an dem gerade geschrieben wurde, in der Annahme, dem GNU-Projekt zu helfen ‑ und dann wurden meine Hoffnungen zunichte gemacht, als fortgefahren wurde zu erklären, dass man einen Vertrag mit einem Verleger hatte, der es so beschränken würde, dass wir es nicht verwenden können.</align>
<align>Da es unter Programmierern eine seltene Gabe ist gutes Englisch zu schreiben, können wir es uns kaum leisten, Handbücher auf diese Weise zu verlieren.</align>
<align>Freie Dokumentation ist wie Freie Software eine Frage der Freiheit, nicht des Preises.</align>
<align>Bei diesen Handbüchern bestand das Problem nicht darin, dass O'Reilly Geld für die gedruckten Exemplare verlangte ‑ das ist völlig in Ordnung (auch die Free Software Foundation verkauft gedruckte Exemplare von freien GNU-Handbüchern).</align>
<align>Aber GNU-Handbücher sind in Form von Quelltext abrufbar, während diese Handbücher nur auf Papier zur Verfügung stehen.</align>
<align>GNU-Handbücher werden mit der Berechtigung zum Kopieren und Modifizieren vertrieben, Perl-Handbücher nicht.</align>
<align>Diese Beschränkungen sind das Problem.</align>
<align>Das Kriterium für ein freies Handbuch ist so ziemlich das gleiche wie für Freie Software: es kommt darauf an, allen Nutzern bestimmte Freiheiten zu gewähren.</align>
<align>Die Weiterverbreitung (auch kommerziell) muss erlaubt sein, so dass das Handbuch jeder Programmkopie beiliegen kann, entweder elektronisch oder auf Papier.</align>
<align>Auch die Berechtigung zur Modifizierung ist entscheidend.</align>
<align>Im Allgemeinen halte ich eine Berechtigung, sämtliche Arten von Artikeln und Büchern modifizieren zu dürfen, nicht für wesentlich.</align>
<align>Die kritischen Punkte beim Schreiben von Texten sind nicht unbedingt dieselben wie für Software.</align>
<align>Beispielsweise denke ich nicht, dass Sie oder ich verpflichtet sind die Berechtigung geben zu müssen, Artikel wie diesen, die unsere Handlungen und Ansichten beschreiben, modifizieren zu dürfen.</align>
<align>Aber es gibt einen bestimmten Grund, warum die Freiheit zu modifizieren gerade für die Dokumentation freier Software von entscheidender Bedeutung ist.</align>
<align>Wenn Menschen ihr Recht ausüben, die Software zu modifizieren und Funktionen hinzuzufügen oder zu ändern, werden sie, wenn sie gewissenhaft sind, auch das Handbuch anpassen ‑ können so genaue und brauchbare Dokumentation mit dem geänderten Programm anbieten.</align>
<align>Ein Handbuch, das Programmierern verbietet gewissenhaft zu sein und die Aufgabe zu beenden ‑ oder genauer: verlangt, dass sie ein komplett neues Handbuch schreiben, wenn sie das Programm ändern ‑ entspricht nicht den Bedürfnissen unserer Gemeinschaft.</align>
<align>Während ein pauschales Verbot einer Modifizierung inakzeptabel ist, stellen bestimmte Einschränkungen bezüglich der Art der Modifizierung kein Problem dar.</align>
<align>In Ordnung sind beispielsweise Anforderungen wie den Copyright-Hinweis des ursprünglichen Autors, die Vertriebsbedingungen oder die Liste der Autoren beizubehalten.</align>
<align>Unproblematisch sind auch Anforderungen, dass modifizierte Versionen einen Hinweis enthalten müssen, dass sie modifiziert wurden, sogar komplette Abschnitte zu haben, die nicht gelöscht oder geändert werden dürfen, solange diese nichttechnische Themen behandeln (solche Abschnitte gibt es in einigen GNU-Handbüchern).</align>
<align>Derartige Beschränkungen sind kein Problem, weil sie in der Praxis den gewissenhaften Programmierer nicht davon abhalten, das Handbuch an das modifizierte Programm anzupassen.</align>
<align>Mit anderen Worten, sie halten die Freie-Software-Gemeinschaft nicht davon ab, uneingeschränkten Gebrauch vom Handbuch zu machen.</align>
<align>Jedoch muss es möglich sein, den ganzen technischen Inhalt des Handbuchs zu modifizieren und anschließend über alle üblichen Medien und Vertriebswege zu vertreiben. Andernfalls behindern die Einschränkungen die Gemeinschaft, das Handbuch ist nicht frei und ein anderes Handbuch wird benötigt.</align>
<align>Leider ist es oft schwer jemanden zu finden, ein weiteres Handbuch zu schreiben, wenn bereits ein proprietäres Handbuch existiert.</align>
<align>Die Hürde ist, dass viele Nutzer denken, ein proprietäres Handbuch sei gut genug ‑ also nicht die Notwendigkeit sehen, ein freies Handbuch zu schreiben.</align>
<align>Sie sehen nicht, dass das freie Betriebssystem eine Lücke hat, die gefüllt werden muss.</align>
<align>Warum halten Nutzer proprietäre Handbücher für gut genug?</align>
<align>Einige haben das Problem nicht durchdacht.</align>
<align>Ich hoffe, dass dieser Artikel etwas dazu beiträgt, um etwas zu ändern.</align>
<align>Andere Nutzer betrachten proprietäre Handbücher aus demselben Grund als akzeptabel, weshalb so viele Leute proprietäre Software als akzeptabel betrachten: sie urteilen nach rein praktischen Gesichtspunkten, nicht mit Freiheit als Kriterium.</align>
<align>Diese Leute haben ein Recht auf ihre Meinungen, aber da diese Meinungen auf Werten basieren, zu denen Freiheit nicht gehört, taugen sie nicht als Vorbild für diejenigen unter uns, denen Freiheit wichtig ist.</align>
<align>Bitte helfen sie mit, diese Angelegenheit ins Bewusstsein zu bringen.</align>
<align>Nach wie vor verlieren wir Handbücher durch proprietäre Verlagspraktiken.</align>
<align>Wenn wir das Bewusstsein dafür steigern, dass proprietäre Handbücher nicht ausreichen, wird vielleicht die nächste Person, die dem GNU-Projekt durch Schreiben von Dokumentation helfen möchte, rechtzeitig erkennen, dass diese vor allem frei bleiben muss ‑ bevor es zu spät ist.</align>
<align>Wir können auch kommerzielle Verleger dazu ermutigen, freie Handbücher mit Copyleft anstatt proprietärer zu verkaufen.</align>
<align>Eine Möglichkeit, die helfen kann, ist die Vertriebsbedingungen eines Handbuchs vor dem Kauf zu überprüfen und bevorzugt Handbücher mit Copyleft zu erwerben.</align>
<align>[Hinweis: Siehe auch Freie Bücher von anderen Verlegern.]</align>
<align>Freie Software verkaufen
In seinem Aufsatz Ausnahmen zur GNU GPL verkaufen geht Richard Stallman (2009) der Frage der Praxis über den Verkauf von Ausnahmen an Freie-Software-Lizenzen nach.</align>
<align>Viele glauben, dass es im Sinne des GNU-Projektes sei, dass man nichts oder zumindest so wenig wie möglich für den Vertrieb von Softwarekopien berechnen solle ‑ gerade genug, um die Kosten zu decken.</align>
<align>Das ist ein Missverständnis.</align>
<align>Tatsächlich ermutigen wir diejenigen, die Freie Software weitervertreiben, sogar dazu, so viel Geld zu berechnen wie sie wollen bzw. können.</align>
<align>Wenn eine Lizenz Nutzern untersagt Kopien anzufertigen und sie zu verkaufen, handelt es sich um eine unfreie Lizenz.</align>
<align>Sollte das überraschend klingen, lesen Sie bitte weiter.</align>
<align>Das Wort frei hat zwei legitime, allgemeine Bedeutungen.</align>
<align>Entweder kann es sich auf Freiheit oder den Preis beziehen.</align>
<align>Sprechen wir von Freie Software , geht es uns um Freiheit, nicht den Preis (man denke an Redefreiheit, nicht an Freibier). Konkret bedeutet dies, dass ein Nutzer das Programm ausführen, untersuchen, ändern und mit oder ohne Änderungen neu distribuieren darf.</align>
<align>Freie Programme werden manchmal gratis, und manchmal zu einem beträchtlichen Preis vertrieben.</align>
<align>Häufig steht dasselbe Programm in beiden Fällen an verschiedenen Orten zur Verfügung.</align>
<align>Das Programm ist unabhängig vom Preis frei, weil Nutzer Freiheit bei der Nutzung haben.</align>
<align>Unfreie Programme werden gewöhnlich zu einem hohen Preis verkauft, aber manchmal bekommt man von einem Anbieter auch eine Kopie kostenlos.</align>
<align>Das macht es jedoch noch lange nicht zu freier Software.</align>
<align>Mit oder ohne einem Preis versehen, das Programm ist unfrei, weil seinen Nutzern Freiheit verweigert wird.</align>
<align>Da Freie Software keine Frage des Preises ist, macht ein niedriger Preis die Software nicht frei oder annähernd frei.</align>
<align>Wenn man also Freie-Software-Kopien weitervertreibt, kann man genauso gut einen beträchtlichen Preis berechnen und damit etwas Geld verdienen.</align>
<align>Freie Software weiterzuvertreiben ist gut und legitim; macht man es, dann kann man ebenso gut einen Gewinn daraus erwirtschaften.</align>
<align>Freie Software ist ein Gemeinschaftsprojekt, und jedermann, der sich darauf stützt, sollte nach Möglichkeiten suchen, um zum Aufbau der Gemeinschaft beizutragen.</align>
<align>Für einen Distributor besteht die Möglichkeit, einen Teil des Gewinns für die Entwicklung an Freie-Software-Projekte oder der Free Software Foundation zukommen zu lassen.</align>
<align>Auf diese Weise kann man die Freie-Software-Welt fördern.</align>
<align>Freie Software zu vertreiben ist eine Gelegenheit, Geldmittel für die Entwicklung aufzubringen.</align>
<align>Vergeuden Sie sie nicht!</align>
<align>Um Geldmittel bereitstellen zu können, muss man etwas übrig haben.</align>
<align>Wenn man einen zu geringen Preis verlangt, hat man nichts mehr übrig, um die Entwicklung zu unterstützen.</align>
<align>Wird ein höherer Vertriebspreis einigen Nutzern schaden?</align>
<align>Einige befürchten manchmal, dass ein hoher Vertriebspreis Freie Software unerschwinglich für Nutzer machen wird, die nicht viel Geld haben.</align>
<align>Bei proprietärer Software verursacht ein hoher Preis genau das ‑ aber Freie Software ist anders.</align>
<align>Der Unterschied besteht darin, dass Freie Software naturgemäß dazu neigt sich zu verbreiten, und es gibt viele Möglichkeiten, sie zu bekommen.</align>
<align>Software-Hamsterer versuchen ihr Möglichstes, um einen davon abzuhalten ein proprietäres Programm auszuführen, ohne den üblichen Preis bezahlt zu haben.</align>
<align>Ist dieser Preis hoch, macht es das für einige Nutzer sehr schwer, das Programm überhaupt zu benutzen.</align>
<align>Bei freier Software müssen Nutzer den Vertriebspreis nicht bezahlen, um die Software benutzen zu können.</align>
<align>Sie können das Programm von einem Freund, der eine Kopie besitzt, oder mit Hilfe eines Freundes, der Zugang zum Internet hat, kopieren.</align>
<align>Oder mehrere Nutzer schließen sich zusammen und teilen sich den Preis einer CD-ROM, dann kann jeder reihum die Software installieren.</align>
<align>Ein hoher Preis für eine CD-ROM stellt kein großes Hindernis dar, wenn die Software frei ist.</align>
<align>Wird ein höherer Vertriebspreis vor der Verwendung freier Software abschrecken?</align>
<align>Ein weiterer häufiger Einwand bezieht sich auf die Popularität freier Software.</align>
<align>Einige denken, dass ein hoher Vertriebspreis die Anzahl der Nutzer reduzieren würde oder ein niedriger Preis aller Voraussicht nach Nutzer anziehen könnte.</align>
<align>Dies trifft auf proprietäre Software zu ‑ aber freie Software ist anders.</align>
<align>Mit so vielen Möglichkeiten, Kopien zu erhalten, hat der Vertriebspreis weniger Auswirkung auf die Popularität.</align>
<align>Wie viele Menschen Freie Software auf lange Sicht benutzen wird hauptsächlich davon bestimmt, wie viel Freie Software kann und wie leicht sie zu bedienen ist.</align>
<align>Viele Nutzer machen Freiheit nicht zu ihrer Priorität; sie können weiterhin proprietäre Software benutzen, wenn Freie Software nicht alle Aufgaben erledigen kann, die sie damit erledigen wollen.</align>
<align>Möchte man also die Anzahl der Nutzer auf lange Sicht erhöhen, sollte man vor allem mehr Freie Software entwickeln.</align>
<align>Der direkteste Weg, dies zu tun, besteht darin, benötigte Freie Software oder Anleitungen selbst zu schreiben.</align>
<align>Aber wenn man eher im Vertrieb tätig ist anstatt etwas zu schreiben, kann man am besten durch die Beschaffung von Geldmitteln helfen, damit andere diese schreiben.</align>
<align>Der Ausdruck Software verkaufen kann auch verwirrend sein
Verkaufen bedeutet genau genommen Handel mit Waren gegen Geld.</align>
<align>Eine Kopie eines freien Programms zu verkaufen ist legitim, und wir unterstützen es.</align>
<align>Doch wenn man an Software verkaufen denkt, verbindet man damit gewöhnlich die Art, wie es die meisten Unternehmen machen: die Software proprietär machen und eben nicht frei.</align>
<align>Sofern man also nicht sorgfältig differenziert ‑ wie dieser Artikel ‑ empfehlen wir den Ausdruck Software verkaufen besser zu vermeiden und stattdessen eine andere Formulierung zu wählen.</align>
<align>Beispielsweise Freie Software gegen ein Entgelt vertreiben ‑ das ist unmissverständlich.</align>
<align>Hohe oder niedrige Preise und die GNU GPL
Mit Ausnahme einer bestimmten Situation beinhaltet die GNU General Public License (GPL) keinerlei Bedingungen darüber, wie viel man für den Vertrieb von Freie-Software-Kopien verlangen kann.</align>
<align>Man kann nichts, einen Cent, einen Euro oder eine Milliarde Euro verlangen.</align>
<align>Es liegt ganz bei Ihnen und an der Marktsituation, also nicht bei uns beschweren, wenn niemand eine Milliarde Euro für eine Kopie bezahlen will.</align>
<align>Die einzige Ausnahme besteht in dem Fall, in denen Binärdateien ohne den entsprechenden vollständigen Quellcode vertrieben werden.</align>
<align>Die Beteiligten sind durch die GNU GPL verpflichtet, den Quellcode auf weitere Anfrage bereitzustellen.</align>
<align>Ohne eine Begrenzung des Preises für den Quellcode wäre es ihnen möglich einen Preis festzulegen, der für jedermann zu hoch zu bezahlen wäre ‑ wie eine Milliarde Euro ‑  und somit vorgeben den Quellcode freizugeben, obwohl sie ihn in Wahrheit verbergen.</align>
<align>Darum müssen wir in diesem Fall den Preis für den Quellcode begrenzen, um die Freiheit der Nutzer zu gewährleisten.</align>
<align>In alltäglichen Situationen gibt es allerdings keine solche Rechtfertigung den Vertriebspreis zu begrenzen, also begrenzen wir ihn nicht.</align>
<align>Manchmal treten Unternehmen, deren Aktivitäten die in der GNU GPL angegebenen Grenze überschreiten, mit der Bitte um Erlaubnis an uns heran, die besagt, dass sie kein Geld für GNU-Software berechnen oder ähnliches.</align>
<align>Damit kann man mit uns keinen Blumentopf gewinnen.</align>
<align>Bei freier Software geht es um Freiheit, und die Durchsetzung der GPL bedeutet Freiheit verteidigen.</align>
<align>Wenn wir die Freiheit von Nutzern verteidigen, lassen wir uns nicht von solchen Nebensächlichkeiten wie etwa wie viel als Vertriebspreis berechnet wird ablenken.</align>
<align>Es geht um Freiheit, einzig und allein.</align>
</doc>
